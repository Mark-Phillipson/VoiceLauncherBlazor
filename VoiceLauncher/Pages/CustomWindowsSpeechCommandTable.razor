@page "/customwindowsspeechcommands"

@if (FilteredCustomWindowsSpeechCommandDTO == null && _loadFailed == true)
{
    <h2 class="text-danger">The data failed to load please try again in a little while..</h2>
    <button class="btn btn-danger" type="button" @onclick="@( () => LoadData() )">Reload</button>
    <h6 class="text-danger">@ExceptionMessage</h6>
}
else if (FilteredCustomWindowsSpeechCommandDTO == null)
{
    <div style="display:normal;margin:auto" class="loader"></div>
}
else if (FilteredCustomWindowsSpeechCommandDTO.Count == 0)
{
    <button @onclick="AddNewCustomWindowsSpeechCommandAsync" class="btn btn-success btn-sm"><i class="fas fa-plus"></i></button>
}
else
{
    <table style="font-size:x-small" class="table table-bordered table-striped table-sm table-responsive-sm">

        <tr>
            <th>
                <button accesskey="x" @onclick="AddNewCustomWindowsSpeechCommandAsync" class="btn btn-success btn-sm">
                    <i class="fas fa-plus"></i> Add Action
                </button>
            </th>
        </tr>

        <tbody>
            @foreach (var customWindowsSpeechCommand in FilteredCustomWindowsSpeechCommandDTO)
            {
                <tr>
                    <th>Wait Time</th>
                    <td>
                        @customWindowsSpeechCommand.WaitTime
                    </td>
                    @if (customWindowsSpeechCommand.TextToEnter != null)
                    {
                        <th> Text to Enter</th>
                        <td>
                            @customWindowsSpeechCommand.TextToEnter
                        </td>
                    }
                    @if (customWindowsSpeechCommand.KeyDownValue != WindowsInput.Native.VirtualKeyCode.NONAME)
                    {
                        <th>Key Down</th>
                        <td>
                            @customWindowsSpeechCommand.KeyDownValue
                        </td>
                    }
                    @if (customWindowsSpeechCommand.ControlKey)
                    {
                        <th>Control</th>
                        <td>
                            <i class="fa-solid fa-square-check"></i>
                        </td>
                    }
                    @if (customWindowsSpeechCommand.AlternateKey)
                    {
                        <th>Alt</th>
                        <td>
                            <i class="fa-solid fa-square-check"></i>
                        </td>
                    }
                    @if (customWindowsSpeechCommand.ShiftKey)
                    {
                        <th>Shift</th>
                        <td>
                            <i class="fa-solid fa-square-check"></i>
                        </td>
                    }
                    @if (customWindowsSpeechCommand.WindowsKey)
                    {
                        <th>Window</th>
                        <td>
                            <i class="fa-solid fa-square-check"></i>
                        </td>
                    }

                    @if (customWindowsSpeechCommand.KeyPressValue != WindowsInput.Native.VirtualKeyCode.NONAME)
                    {
                        <th>Key Press</th>
                        <td>
                            @customWindowsSpeechCommand.KeyPressValue
                        </td>
                    }
                    @if (customWindowsSpeechCommand.KeyUpValue != WindowsInput.Native.VirtualKeyCode.NONAME)
                    {
                        <th>Key Up</th>
                        <td>
                            @customWindowsSpeechCommand.KeyUpValue
                        </td>
                    }
                    @if (customWindowsSpeechCommand.MouseCommand != null)
                    {
                        <th>Mouse Command</th>
                        <td>
                            @customWindowsSpeechCommand.MouseCommand
                        </td>
                    }
                    @if (customWindowsSpeechCommand.ProcessStart != null)
                    {
                        <th>Process Start</th>
                        <td>
                            @customWindowsSpeechCommand.ProcessStart
                        </td>
                    }
                    @if (customWindowsSpeechCommand.CommandLineArguments != null)
                    {
                        <th>Command Line Args</th>
                        <td>@customWindowsSpeechCommand.CommandLineArguments</td>
                    }
                    @if (customWindowsSpeechCommand.SendKeysValue != null)
                    {
                        <th>Send Keys Value</th>
                        <td>@customWindowsSpeechCommand.SendKeysValue</td>
                    }
                    <td class="btn-group">
                        <button class="btn btn-sm btn-warning" @onclick="@(() => EditCustomWindowsSpeechCommandAsync(customWindowsSpeechCommand.Id))">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteCustomWindowsSpeechCommandAsync(customWindowsSpeechCommand.Id))">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
