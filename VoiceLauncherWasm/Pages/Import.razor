@page "/import"
@inject VoiceLauncherWasm.Services.IIndexedDBService IndexedDBService
@using RCLTalonShared.Models
@inject RCLTalonShared.Services.TalonImportService TalonImportService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Import Talon Scripts - Voice Launcher WASM</PageTitle>

<div class="container mt-4">
    <h2>Import Talon Scripts</h2>
    <p>Import .talon files into the browser database for local storage and management.</p>
    
    <!-- Navigation Links -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="btn-group" role="group" aria-label="Talon Tools Navigation">
                <a href="/commands" class="btn btn-outline-primary">
                    <i class="oi oi-magnifying-glass me-1"></i> Search Commands
                </a>
                <a href="/analysis" class="btn btn-outline-info">
                    <i class="oi oi-graph me-1"></i> Analysis Report
                </a>
                <span class="btn btn-primary disabled">
                    <i class="oi oi-cloud-upload me-1"></i> Import Scripts
                </span>
            </div>
        </div>
    </div></div>

<div class="row">
    <div class="col-md-8">
        <div class="card">
            <div class="card-header">
                <h4>File Upload</h4>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="talonFiles" class="form-label">Select .talon files</label>
                    <InputFile id="talonFiles" OnChange="HandleTalonFilesSelected" multiple accept=".talon" class="form-control" />
                    <div class="form-text">Select one or more .talon files to import voice commands.</div>
                </div>

                <div class="mb-3">
                    <label for="listFiles" class="form-label">Select TalonLists.txt files</label>
                    <InputFile id="listFiles" OnChange="HandleListFilesSelected" multiple accept=".txt" class="form-control" />
                    <div class="form-text">Select TalonLists.txt files to import command lists.</div>
                </div>

                <div class="mb-3">
                    <label for="repository" class="form-label">Repository Name (Optional)</label>
                    <input type="text" id="repository" @bind="repositoryName" class="form-control" 
                           placeholder="e.g., talon-community, my-talon-config" />
                    <div class="form-text">Helps organize your imported commands by source.</div>
                </div>

                @if (isProcessing)
                {
                    <div class="text-center">
                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                        Processing files... (@processingStatus)
                    </div>
                }
                else
                {
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" @onclick="ProcessFiles" disabled="@(!HasFilesToProcess)">
                            Import Selected Files
                        </button>
                        <button class="btn btn-outline-danger" @onclick="ClearAllData">
                            Clear All Data
                        </button>
                        <button class="btn btn-outline-secondary" @onclick="RunDiagnostics">
                            Run diagnostics
                        </button>
                        <button class="btn btn-outline-warning" @onclick="RecreateDatabase">
                            Recreate DB (delete + init)
                        </button>
                        <button class="btn btn-outline-dark" @onclick="ForceCleanup">
                            Force cleanup (unregister SW + clear caches)
                        </button>
                        <button class="btn btn-outline-info" @onclick="RewriteDatabase">
                            Rewrite DB (normalize in-place)
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="col-md-4">
        <div class="card">
            <div class="card-header">
                <h4>Import Summary</h4>
            </div>
            <div class="card-body">
                @if (selectedTalonFiles.Any())
                {
                    <div class="mb-3">
                        <h6>Talon Files (@selectedTalonFiles.Count)</h6>
                        <ul class="list-unstyled small">
                            @foreach (var file in selectedTalonFiles.Take(5))
                            {
                                <li>• @file.Name</li>
                            }
                            @if (selectedTalonFiles.Count > 5)
                            {
                                <li class="text-muted">... and @(selectedTalonFiles.Count - 5) more</li>
                            }
                        </ul>
                    </div>
                }

                @if (selectedListFiles.Any())
                {
                    <div class="mb-3">
                        <h6>List Files (@selectedListFiles.Count)</h6>
                        <ul class="list-unstyled small">
                            @foreach (var file in selectedListFiles.Take(5))
                            {
                                <li>• @file.Name</li>
                            }
                            @if (selectedListFiles.Count > 5)
                            {
                                <li class="text-muted">... and @(selectedListFiles.Count - 5) more</li>
                            }
                        </ul>
                    </div>
                }

                @if (importResults.Any())
                {
                    <div class="alert alert-success">
                        <h6>Last Import Results</h6>
                        @foreach (var result in importResults)
                        {
                            <div class="small">@result</div>
                        }
                    </div>
                }

                @if (!string.IsNullOrEmpty(diagnosticsOutput))
                {
                    <div class="alert alert-info mt-2">
                        <h6>Diagnostics</h6>
                        <pre class="small">@diagnosticsOutput</pre>
                    </div>
                }
                @if (!string.IsNullOrEmpty(lastJsError))
                {
                    <div class="alert alert-danger mt-2">
                        <h6>Last JS error</h6>
                        <pre class="small">@lastJsError</pre>
                    </div>
                }
            </div>
        </div>

        <div class="card mt-4">
            <div class="card-header">
                <h4>Help</h4>
            </div>
            <div class="card-body">
                <div class="small">
                    <p><strong>Talon Files:</strong> These contain voice commands with their corresponding scripts.</p>
                    <p><strong>List Files:</strong> These contain lists of values that can be used in voice commands.</p>
                    <p><strong>Repository:</strong> Optional field to help organize your commands by source project.</p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<IBrowserFile> selectedTalonFiles = new();
    private List<IBrowserFile> selectedListFiles = new();
    private List<string> importResults = new();
    private string repositoryName = string.Empty;
    private bool isProcessing = false;
    private string processingStatus = string.Empty;
    
    private bool HasFilesToProcess => selectedTalonFiles.Any() || selectedListFiles.Any();
    private string diagnosticsOutput = string.Empty;
    private string lastJsError = string.Empty;

    private void HandleTalonFilesSelected(InputFileChangeEventArgs e)
    {
        selectedTalonFiles = e.GetMultipleFiles(100).ToList();
        StateHasChanged();
    }

    private async Task RewriteDatabase()
    {
        var ok = await JSRuntime.InvokeAsync<bool>("confirm", "This will rewrite all records in the local database to the normalized PascalCase format. Continue?");
        if (!ok) return;

        try
        {
            var res = await IndexedDBService.RewriteDatabaseAsync();
            if (res != null)
            {
                importResults.Add("Rewrite DB result: " + System.Text.Json.JsonSerializer.Serialize(res));
            }
            else
            {
                importResults.Add("Rewrite DB completed (no details returned)");
            }
            await RunDiagnostics();
        }
        catch (Exception ex)
        {
            importResults.Add("Rewrite DB failed: " + ex.Message);
            try { var jsErr = await IndexedDBService.GetLastErrorAsync(); if (!string.IsNullOrEmpty(jsErr)) importResults.Add("JS: " + jsErr); } catch { }
        }
        StateHasChanged();
    }

    private async Task ForceCleanup()
    {
        var ok = await JSRuntime.InvokeAsync<bool>("confirm", "This will attempt to unregister service workers, clear caches/localStorage, and delete or migrate the IndexedDB database. Continue?");
        if (!ok) return;

        try
        {
            // Call the JS helper via the C# wrapper. The helper returns a JSON-serializable object; capture as string for display.
            var result = await IndexedDBService.ForceCleanupAsync();
            if (result != null)
            {
                // display a short summary and include diagnostics
                importResults.Add("Force cleanup result: " + System.Text.Json.JsonSerializer.Serialize(result));
            }
            else
            {
                importResults.Add("Force cleanup completed (no details returned)");
            }
            // refresh diagnostics to show current DB state
            await RunDiagnostics();
        }
        catch (Exception ex)
        {
            importResults.Add("Force cleanup failed: " + ex.Message);
            try
            {
                var jsErr = await IndexedDBService.GetLastErrorAsync();
                if (!string.IsNullOrEmpty(jsErr)) importResults.Add("JS: " + jsErr);
            }
            catch { }
        }
        StateHasChanged();
    }

    private void HandleListFilesSelected(InputFileChangeEventArgs e)
    {
        selectedListFiles = e.GetMultipleFiles(100).ToList();
        StateHasChanged();
    }

    private async Task ProcessFiles()
    {
        if (!HasFilesToProcess) return;

        isProcessing = true;
        importResults.Clear();
        int commandsImported = 0;
        int listsImported = 0;

        try
        {
            await IndexedDBService.InitializeAsync();

            // Process Talon files
            foreach (var file in selectedTalonFiles)
            {
                processingStatus = $"Processing {file.Name}...";
                StateHasChanged();

                using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024); // 1MB limit
                using var reader = new StreamReader(stream);
                var content = await reader.ReadToEndAsync();

                var commands = TalonImportService.ParseTalonFile(content, file.Name, repositoryName);
                foreach (var command in commands)
                {
                    // map shared RCL model to client model
                    var clientCommand = new VoiceLauncherWasm.Models.TalonVoiceCommand
                    {
                        Id = 0,
                        Command = command.VoiceCommand,
                        Script = command.TalonScript,
                        Application = command.Application,
                        Repository = command.Repository,
                        FileName = command.FilePath,
                        DateCreated = command.DateCreated
                    };
                    try
                    {
                        await IndexedDBService.AddCommandAsync(clientCommand);
                        commandsImported++;
                    }
                    catch (Exception exCmd)
                    {
                        importResults.Add($"Failed to store command '{clientCommand.Command}': {exCmd.Message}");
                        // try to surface JS-side error
                        try
                        {
                            var jsErr = await IndexedDBService.GetLastErrorAsync();
                            if (!string.IsNullOrEmpty(jsErr)) importResults.Add("JS: " + jsErr);
                        }
                        catch { }
                    }
                }
            }

            // Process List files
            foreach (var file in selectedListFiles)
            {
                processingStatus = $"Processing {file.Name}...";
                StateHasChanged();

                using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024); // 1MB limit
                using var reader = new StreamReader(stream);
                var content = await reader.ReadToEndAsync();

                var lists = TalonImportService.ParseTalonListsFile(content, repositoryName);
                foreach (var list in lists)
                {
                    var clientList = new VoiceLauncherWasm.Models.TalonList
                    {
                        Id = list.Id,
                        ListName = list.ListName,
                        Value = list.Value,
                        Repository = list.Repository,
                        DateCreated = list.DateCreated
                    };
                    try
                    {
                        await IndexedDBService.AddListAsync(clientList);
                        listsImported++;
                    }
                    catch (Exception exList)
                    {
                        importResults.Add($"Failed to store list '{clientList.ListName}': {exList.Message}");
                        try
                        {
                            var jsErr = await IndexedDBService.GetLastErrorAsync();
                            if (!string.IsNullOrEmpty(jsErr)) importResults.Add("JS: " + jsErr);
                        }
                        catch { }
                    }
                }
            }

            // Show results
            if (commandsImported > 0)
                importResults.Add($"Imported {commandsImported} voice commands");
            if (listsImported > 0)
                importResults.Add($"Imported {listsImported} list items");

            // Clear selections
            selectedTalonFiles.Clear();
            selectedListFiles.Clear();

            // Run diagnostics to show current DB state and JS errors
            try { await RunDiagnostics(); } catch { }
        }
        catch (Exception ex)
        {
            importResults.Add($"Error: {ex.Message}");
            Console.WriteLine($"Import error: {ex}");
        }
        finally
        {
            isProcessing = false;
            processingStatus = string.Empty;
            StateHasChanged();
        }
    }

    private async Task ClearAllData()
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to clear all imported data? This cannot be undone."))
            return;

        try
        {
            await IndexedDBService.ClearAllDataAsync();
            importResults.Clear();
            importResults.Add("All data cleared successfully");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            importResults.Add($"Error clearing data: {ex.Message}");
            Console.WriteLine($"Clear data error: {ex}");
            StateHasChanged();
        }
    }

    private async Task RunDiagnostics()
    {
        diagnosticsOutput = string.Empty;
        try
        {
            await IndexedDBService.InitializeAsync();
            var cmds = await IndexedDBService.GetAllCommandsAsync();
            var lists = await IndexedDBService.GetAllListsAsync();
            diagnosticsOutput = $"Commands: {cmds?.Count ?? 0}\nLists: {lists?.Count ?? 0}\n\nSample commands:\n";
            if (cmds != null && cmds.Count > 0)
            {
                var sample = cmds.Take(5).Select(c => System.Text.Json.JsonSerializer.Serialize(c));
                diagnosticsOutput += string.Join('\n', sample);
            }
            // get last JS error if present
            var jsErr = await IndexedDBService.GetLastErrorAsync();
            lastJsError = jsErr ?? string.Empty;
        }
        catch (Exception ex)
        {
            diagnosticsOutput = "Diagnostics failed: " + ex.Message;
        }
        StateHasChanged();
    }

    private async Task RecreateDatabase()
    {
        var ok = await JSRuntime.InvokeAsync<bool>("confirm", "This will delete the local IndexedDB database and reinitialize it. Continue?");
        if (!ok) return;
        try
        {
            var res = await IndexedDBService.DeleteDatabaseAsync();
            if (!res)
            {
                importResults.Add("Database delete blocked. Attempting an in-place upgrade/migration instead...");
                StateHasChanged();
                // Try a force upgrade to trigger onupgradeneeded without deleting the DB
                var upgradeRes = await IndexedDBService.ForceUpgradeAsync();
                if (upgradeRes)
                {
                    importResults.Add("Force upgrade succeeded. Database migrated.");
                }
                else
                {
                    importResults.Add("Force upgrade failed. Close other tabs/windows for this origin and retry.");
                }
                StateHasChanged();
                return;
            }
            await IndexedDBService.InitializeAsync();
            importResults.Add("Database recreated");
        }
        catch (Exception ex)
        {
            importResults.Add("Recreate DB failed: " + ex.Message);
        }
        StateHasChanged();
    }

    public ValueTask DisposeAsync()
    {
        return ValueTask.CompletedTask;
    }
}