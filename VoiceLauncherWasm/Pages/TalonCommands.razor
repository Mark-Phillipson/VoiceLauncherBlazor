@page "/talon-commands"
@using VoiceLauncherWasm.Services
@using VoiceLauncherWasm.Models
@inject TalonVoiceCommandService TalonCommandService
@inject IJSRuntime JSRuntime

<PageTitle>Talon Commands</PageTitle>

<h1>Talon Voice Commands</h1>

<div class="row mb-3">
    <div class="col-md-8">
        <div class="input-group">
            <input type="text" class="form-control" placeholder="Search commands..." @bind="searchTerm" @onkeypress="HandleKeyPress" />
            <button class="btn btn-outline-secondary" type="button" @onclick="SearchCommands">
                Search
            </button>
            <button class="btn btn-outline-danger" type="button" @onclick="ClearSearch">
                Clear
            </button>
        </div>
    </div>
    <div class="col-md-4">
        <select class="form-select" @bind="searchType">
            <option value="all">All Fields</option>
            <option value="command">Command Names Only</option>
            <option value="script">Script Only</option>
        </select>
    </div>
</div>

<div class="row mb-3">
    <div class="col">
        <p class="text-muted">Total Commands: @totalCommands | Displaying: @filteredCommands.Count()</p>
    </div>
</div>

@if (isLoading)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (filteredCommands.Any())
{
    <div class="table-responsive">
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>Command</th>
                    <th>Script</th>
                    <th>Application</th>
                    <th>Repository</th>
                    <th>Mode</th>
                    <th>Created</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var command in filteredCommands.Take(100))
                {
                    <tr>
                        <td>
                            <strong>@command.Command</strong>
                            @if (!string.IsNullOrEmpty(command.Title))
                            {
                                <br /><small class="text-muted">@command.Title</small>
                            }
                        </td>
                        <td>
                            <code class="small">@TruncateText(command.Script, 100)</code>
                        </td>
                        <td>
                            <span class="badge bg-primary">@command.Application</span>
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(command.Repository))
                            {
                                <span class="badge bg-info">@command.Repository</span>
                            }
                        </td>
                        <td>
                            @if (!string.IsNullOrEmpty(command.Mode))
                            {
                                <span class="badge bg-secondary">@command.Mode</span>
                            }
                        </td>
                        <td>
                            <small>@command.CreatedAt.ToString("yyyy-MM-dd")</small>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (filteredCommands.Count() > 100)
    {
        <div class="alert alert-info">
            <strong>Note:</strong> Showing first 100 results. Use search to filter results.
        </div>
    }
}
else
{
    <div class="alert alert-warning">
        <strong>No commands found.</strong> 
        @if (!string.IsNullOrEmpty(searchTerm))
        {
            <text>Try adjusting your search criteria.</text>
        }
        else
        {
            <text>Import some Talon files to get started.</text>
        }
    </div>
}

@code {
    private IEnumerable<TalonVoiceCommand> allCommands = new List<TalonVoiceCommand>();
    private IEnumerable<TalonVoiceCommand> filteredCommands = new List<TalonVoiceCommand>();
    private string searchTerm = "";
    private string searchType = "all";
    private bool isLoading = true;
    private int totalCommands = 0;

    protected override async Task OnInitializedAsync()
    {
    Console.WriteLine("TalonCommands: OnInitializedAsync - loading commands");
    await LoadCommands();
    }

    private async Task LoadCommands()
    {
        isLoading = true;
        try
        {
            allCommands = await TalonCommandService.GetAllAsync();
            filteredCommands = allCommands;
            totalCommands = await TalonCommandService.GetCountAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading commands: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SearchCommands()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredCommands = allCommands;
            return;
        }

        isLoading = true;
        try
        {
            filteredCommands = searchType switch
            {
                "command" => await TalonCommandService.SearchCommandNamesOnlyAsync(searchTerm),
                "script" => await TalonCommandService.SearchScriptOnlyAsync(searchTerm),
                _ => await TalonCommandService.SearchAsync(searchTerm)
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error searching commands: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ClearSearch()
    {
        searchTerm = "";
        await LoadCommands();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchCommands();
        }
    }

    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
            return text;

        return text.Substring(0, maxLength) + "...";
    }
}