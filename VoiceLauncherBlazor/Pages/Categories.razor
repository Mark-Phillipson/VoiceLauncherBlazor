@page "/categories"

@using VoiceLauncherBlazor.Data
@using VoiceLauncherBlazor.Models
@inject VoiceLauncherService VoiceLauncherService
@inject NavigationManager NavigationManager

<h3>
    List of Categories
    @if (StatusMessage != null)
    {
        <small class="text-danger"> Last Action: @StatusMessage</small>
    }
    @if (SearchTerm != null)
    {
        <small class="text-warning"> Filter: @SearchTerm</small>
    }
</h3>

<div class="form-field row">
    <a accesskey="0" class="btn btn-sm btn-success col-md-2" href="/category/0">Create (0) <i class="oi oi-plus"></i></a>
    <label class="control-label col-md-1">Filter</label>
    <input @bind="SearchTerm" @bind:event="oninput" class="form-control col-md-5" accesskey="1" placeholder="Type to Filter, Use Press Commands to trigger (1)" />
    <button accesskey="2" class="btn btn-sm btn-primary col-md-2" type="button" @onclick="ApplyFilter">Filter (2) <i class="oi oi-magnifying-glass"></i></button>
</div>
@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else if (categories.Count == 0)
{
<text>No categories found</text> }
            else
            {
                @*<input placeholder="Type to filter"  @bind="@searchTerm" />*@
                <table class="table table-dark table-bordered table-striped" id="table1">
                    <thead>
                        <tr>
                            <th>
                            Category Name 
                            <button @onclick="@(e  => SortCategories("CategoryName","Ascending"))" class="btn btn-sm btn-info"><i class="oi oi-sort-ascending"></i></button>
                            <button @onclick="@(e => SortCategories("CategoryName","Descending"))" class="btn btn-sm btn-info"><i class="oi oi-sort-descending"></i></button>
                            </th>
                            <th style="width: 350px">
                                <div class="row">
                                    <div class="col-md-6">Category Type</div>
                                    <select accesskey="1" class="form-control-sm col-md-5" style="width: 150px" @bind="categoryTypeFilter" @onblur="FilterCategoryType">
                                        <option value="">-Select to filter-</option>
                                        @if (generalLookups != null)
                                        {
                                            @foreach (var lookup in generalLookups)
                                            {
                                                <option value="@lookup.ItemValue">@lookup.ItemValue</option>
                                            }
                                        }
                                    </select>
                                </div>
                            </th>
                            <th>
                                Children
                            </th>
                            <th>
                                <button class="btn btn-sm btn-success" @onclick="SaveAllCategories" >Save All <i class="oi oi-hard-drive"></i></button>
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @{ var counter = 2;}
                        @foreach (var category in categories)
                        {
                            counter++;
                            <tr>
                                <td>
                                    <input class="form-control" @bind="category.CategoryName" />
                                    @*@category.CategoryName*@
                                </td>
                                <td>
                                    <input disabled="disabled" class="form-control" @bind="category.CategoryType" />
                                </td>
                                <td>
                                    @if (category.CategoryType == "Launch Applications")
                                    {
                                        @category.Launcher.Count
                                    }
                                    else
                                    {
                                        <a href="intellisensesC/@category.Id">@category.CustomIntelliSense.Count</a>
                                    }
                                </td>
                                <td>
                                    <a accesskey="@(counter< 10 ? counter.ToString():"")" class="btn btn-sm btn-success" href="/category/@category.Id">Edit @(counter< 10 ? "(" + counter.ToString() + ")" : "") <i class="oi oi-pencil"></i></a>
                                    <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteCategory(category.Id))">Delete <i class="oi oi-circle-x"></i></button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
<TemplatedDialog Show="ShowDialog">
    <ConfirmDialog Message="Please confirm you wish to Delete this Category!" 
                   Title="Confirmation Required" 
                   OnCancel="CancelDelete" OnConfirm="@(() => DeleteCategory(categoryIdDelete))">
    </ConfirmDialog>
</TemplatedDialog>

@code {
    public bool ShowDialog { get; set; }
    private int categoryIdDelete { get; set; }
    private List<VoiceLauncherBlazor.Models.Category> categories;
    public string StatusMessage { get; set; }
    public List<VoiceLauncherBlazor.Models.GeneralLookup> generalLookups { get; set; }
    private string categoryTypeFilter { get; set; }
    private string searchTerm;
    public string SearchTerm
    {
        get => searchTerm;
        set
        {
            if (searchTerm != value)
            {
                searchTerm = value;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        categories = await VoiceLauncherService.GetCategoriesAsync();
        generalLookups = await VoiceLauncherService.GetGeneralLookUpsAsync("Category Types");
    }

    async Task ApplyFilter()
    {
        if (SearchTerm != null)
        {
            categories = await VoiceLauncherService.GetCategoriesAsync(SearchTerm.Trim());
            StateHasChanged();
        }
    }

    void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
    }
    void ConfirmDelete(int categoryId)
    {
        ShowDialog = true;
        categoryIdDelete = categoryId;
    }
    void CancelDelete()
    {
        ShowDialog = false;
    }
    async Task SortCategories(string column,string sortType)
    {
        categories = await VoiceLauncherService.GetCategoriesAsync(searchTerm, column, sortType);
    }
    async Task DeleteCategory(int categoryId)
    {
        var result = await VoiceLauncherService.DeleteCategory(categoryId);
        StatusMessage = result;
        ShowDialog = false;
        categories = await VoiceLauncherService.GetCategoriesAsync();
    }
    async Task FilterCategoryType()
    {
        if (categoryTypeFilter!= null )
        {
            categories = await VoiceLauncherService.GetCategoriesAsync( null , null , null ,categoryTypeFilter);
        }
    }
    async Task SaveAllCategories()
    {
        categories = await VoiceLauncherService.SaveAllCategories(categories);
        StatusMessage= $"Categories Successfully Saved {DateTime.UtcNow:h:mm:ss tt zz}";
    }
}
