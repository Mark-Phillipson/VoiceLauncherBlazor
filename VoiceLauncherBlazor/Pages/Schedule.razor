@page "/schedule"
@inject AppointmentService Service
<DxScheduler Id="scheduler"
             StartDate="@(DateTime.Today.AddDays(-1))"
             DataStorage="@DataStorage"
             AppointmentInserting="(e) => AppointmentInserting(e)"
             AppointmentInserted="async (e) => await AppointmentInserted(e)"
             AppointmentUpdated=" async (e) => await AppointmentUpdated(e)"
             AppointmentRemoved=" async (e) => await AppointmentRemoved(e)"
             >

    <DxSchedulerWorkWeekView ShowWorkTimeOnly="true"></DxSchedulerWorkWeekView>

</DxScheduler>

<a class="btn btn-outline-info btn-lg" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxScheduler#views">Documentation</a>
<a  class="btn btn-outline-info btn-lg" href="https://docs.devexpress.com/Blazor/DevExpress.Blazor.DxSchedulerAppointmentItem"> Create Edit Delete</a>
@*<button class="btn btn-sm btn-success" @onclick="() => { scheduleViewType = SchedulerViewType.Day; StateHasChanged(); }">Day</button>
<button class="btn btn-sm btn-success" @onclick="() => { scheduleViewType = SchedulerViewType.Week; StateHasChanged(); }">Week</button>
<button class="btn btn-sm btn-success" @onclick="() => { scheduleViewType = SchedulerViewType.WorkWeek; StateHasChanged(); }">Work Week</button>*@
@if (StatusMessage != null)
{
    <Alert Title="Last Action:" Display="@StatusMessage" Show="true" Duration="6000" AlertType="@AlertType" />
}

@code {
    List<Appointment> Appointments { get; set; }
    DxSchedulerDataStorage DataStorage { get; set; } = new DxSchedulerDataStorage();
    public string StatusMessage { get; set; }
    public string AlertType { get; set; } = "info";
    protected override async Task OnInitializedAsync()
    {
        Appointments = await Service.GetAppointments();
        DataStorage = new DxSchedulerDataStorage()
        {
            AppointmentsSource = Appointments,
            AppointmentMappings = new DxSchedulerAppointmentMappings()
            {
                Id = "Id",
                Type = "AppointmentType",
                Start = "StartDate",
                End = "EndDate",
                Subject = "Caption",
                AllDay = "AllDay",
                Location = "Location",
                Description = "Description",
                LabelId = "Label",
                StatusId = "Status",
                RecurrenceInfo = "Recurrence"
            }
        };
    }
    private async Task SaveAppointments()
    {
        var appointments = (List<Appointment>)(DataStorage.AppointmentsSource);
        var result = await Service.SaveAppointments(appointments.ToList());
        StatusMessage = result;
        DataStorage.AppointmentsSource = await Service.GetAppointments();
        StateHasChanged();
    }
    void AppointmentInserting(SchedulerAppointmentOperationEventArgs e)
    {
        e.Appointment.Id = -1;
    }
    async Task AppointmentInserted(DxSchedulerAppointmentItem e)
    {
        var appointment = (DataStorage.AppointmentsSource as List<Appointment>).Where(v => v.Id == -1).FirstOrDefault();
        var result = await Service.SaveAppointment(appointment);
        StatusMessage = result;
        DataStorage.AppointmentsSource = await Service.GetAppointments();
        StateHasChanged();
    }
    async Task AppointmentUpdated(DxSchedulerAppointmentItem e)
    {
        var appointment = (DataStorage.AppointmentsSource as List<Appointment>).Where(v => v.Id == Convert.ToInt32(e.Id)).FirstOrDefault();
        var result = await Service.SaveAppointment(appointment);
        StatusMessage = result;
        StateHasChanged();
    }
    async Task AppointmentRemoved(DxSchedulerAppointmentItem e)
    {
        var result = await Service.RemoveAppointment(e.Id.ToString());
        StatusMessage = result;
        StateHasChanged();
    }
}
