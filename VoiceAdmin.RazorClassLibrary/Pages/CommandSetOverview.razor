@page "/commandsetoverview"

@using RazorClassLibrary.Components
@if (!string.IsNullOrEmpty(Message))
{
	<div class="alert alert-warning alert-dismissible fade show" role="alert">
		<strong>Warning</strong> @Message
	</div>
}
<div style="margin:4px">
	<div class="row form-inline">
		<div class="col-5">
			@Title <span class="text-primary">KnowBrainer</span>:
			<button class="btn btn-sm btn-outline-primary" type="button" @onclick="@(() => OpenFileKb())">  @CommandSet?.KBFilename </button>
		</div>
		<div class="col-2">
			<div class="form-group">
				<label for="ShowInfo"  class="control-label">More Info</label>
				<input type="checkbox" id="ShowInfo"  class="form-control form-control-sm m-1" @bind="@_showInfo" />
			</div>
		</div>
		<div class="col-4">
			<span class="text-info">Dragon</span>:
			<button class="btn btn-sm btn-outline-info" type="button" @onclick="@(() => OpenFileDragon())">@CommandSet?.DragonFilename</button>
		</div>
		@if (_showInfo)
		{
			<div class="col-6">
				<span>			Commands</span>
				<span class="badge badge-primary" title="Number of scripts">@CommandSet?.KBScripts</span> <span>Lists</span> <span class="badge badge-primary" title="Number of Lists">@CommandSet?.KBLists</span>
			</div>
			<div class="col-6">
				<span>Commands</span> <span class="badge badge-info" title="Number of Commands">@CommandSet?.DragonScripts</span>
				<span>Lists</span>
				<span class="badge badge-info" title="Number of Lists">@CommandSet?.DragonLists</span>
			</div>
		}
	</div>
	<label class="control-label">Custom files</label>
	<InputFile class="btn btn-sm btn-primary border border-primary" OnChange="ImportFileAsync" @onclick="@(() => SetImportFlag(true))" />
	<InputFile OnChange="ImportFileAsync" class="btn btn-info btn-sm border border-info" @onclick="@(() => SetImportFlag(false))" />
</div>
<div class="form-inline">
	<div style="margin:4px">	<label for="ShowCommands" class="control-label">Show Commands</label></div>
	<div style="margin:4px">
		<input id="ShowCommands" type="checkbox" class="form-control" @bind="@ShowCommands" title="Show Commands" />
	</div>
	<div style="margin:4px">	<label for="ShowLists" class="control-label">Lists</label></div>
	<div style="margin:4px">valuestoinsert
		<input type="checkbox" id="ShowLists" class="form-control" @bind="@ShowLists" title="Hide Code Only" />
	</div>
	<div style="margin:4px">	<label for="ShowCode" class="control-label">Code</label></div>
	<div style="margin:4px">
		<input type="checkbox" id="ShowCode" class="form-control" @bind="@ShowCode" title="Hide Code Only" />
	</div>
	<div style="margin:4px"><label class="control-label ml-4">Filter</label></div>
	<div style="margin:6px">
		<input @ref="SearchInput" class="form-control mr-4" style="float:right" accesskey="1" @bind="@SearchTerm" @bind:event="oninput" id="SearchInput" name="SearchTerm" placeholder="Command Name (Alt+1)" />
	</div>
	<div style="margin:4px">
		<input class="form-control m-1" style="float:right" @bind="@SearchTermApplication" accesskey="2" @bind:event="oninput" id="SearchInputApplication" name="SearchTermApplication" placeholder="Applications (Alt+2)" />
	</div>
	@{
		string partialClass = "primary";
	}
	@if (FilteredTargetApplications != null)
	{
		@foreach (var item in FilteredTargetApplications.OrderBy(v => v.ModuleDescription))
		{
			if (item.CommandSource == "KB")
			{
				partialClass = "primary";
			}
			else
			{
				partialClass = "info";
			}
			<button type="button" class="btn btn-sm btn-outline-@partialClass m-1" @onclick="@(() => SetApplicationFilter(item.ModuleDescription))">@item.ModuleDescription <span class="badge badge-@partialClass">@item.VoiceCommands.Count</span></button>
		}
	}
	<div style="margin:4px">
		<button class="btn btn-success" type="button" @onclick="@( ( ) => BuildSearchUrl(  ) )">Build Search Url</button>
	</div>
</div>

@if (FilteredTargetApplications == null && _loadFailed == true)
{
	<h1 class="text-danger">The data failed to load please try again in a little while..</h1>
	<h6>@ExceptionMessage</h6>
}
else if (FilteredTargetApplications == null)
{
	<br>
	<br>
	<h5 class="text-info animate__animated animate__bounce animate__delay-5s text-center"> Please enter a search term (Command or Application)</h5>
}
else if (FilteredTargetApplications.Count == 0)
{
	<p>No Commands/scripts Found.</p>
}
else
{
	<table style="max-width:1500px" class="table table-responsive-sm table-dark table-condensed table-bordered table-sm" id="tableTargetApplications">
		<thead>
			<tr>
				<th style="max-width:200px">Application/Global</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var targetApplication in FilteredTargetApplications.OrderBy(a => a.ModuleDescription))
			{
				var className = "info";
				if (targetApplication.CommandSource == "KB")
				{
					className = "primary";
				}
				<tr>
					<td>
						<button class="btn btn-outline-@className" type="button" @onclick="@( ( ) => ApplyApplicationFilter( targetApplication.Module ) )">
							<span class="m-1">Source</span><span class="text-warning"> @targetApplication.CommandSource </span>
							<span class="m-1">Description</span><span class="text-danger"> @targetApplication.ModuleDescription </span>
							<span class="m-1">Module</span><span class="text-secondary"> @targetApplication.Module </span>
							<span class="m-1">Scope</span><span class="text-secondary"> @targetApplication.Scope </span>
							<span class="m-1">Company</span><span class="text-secondary"> @targetApplication.Company</span>
							@if (targetApplication.WindowTitle != null)
							{
								<span class="m-1">  Window Title </span>

								<span class="text-secondary">@targetApplication.WindowTitle</span>
							}
							@if (targetApplication.WindowClass != null)
							{
								<span class="m-1">  Window Class </span>

								<span class="text-secondary">@targetApplication.WindowClass</span>
							}
							<span class="m-1">Commands</span><span class="text-secondary">
								<span class="badge badge-@className">@targetApplication.VoiceCommands.Count(c => c.Name.ToLower().Contains(SearchTerm.ToLower()))</span>

							</span>
						</button>
					</td>
				</tr>
				<tr>
					@if (ShowCommands && recordsReturned < 20)
					{
						<table style="background-color:slategrey">
							<tr>
								<th>
									Command Name
								</th>
								<th>
									Description
								</th>
								<th>
									Group
								</th>
								<th>
									Enabled?
								</th>
							</tr>
							@{
								var voiceCommands = targetApplication.VoiceCommands?.Where(v => (SearchTerm != null && v.Name.ToLower().Contains(SearchTerm.ToLower())
								&& v.Name.Length > 0)).Count();
							}
							@foreach (var voiceCommand in targetApplication.VoiceCommands
										.Where(v => (SearchTerm != null && v.Name.ToLower().Contains(SearchTerm.ToLower())
										&& v.Name.Length > 0))
										.OrderBy(a => a.Name))
							{
								<tr>
									<td title="Click to filter and copy" @onclick="@(() => CommandDrillDownAsync(voiceCommand.Name))">
										<button class="btn btn-success">@voiceCommand.Name</button>
									</td>
									<td>
										@voiceCommand.Description
									</td>
									<td>
										@voiceCommand.Group
									</td>
									<td>
										@voiceCommand.Enabled
									</td>
								</tr>
								@if (voiceCommands < 50) // Anymore and the page will crash
								{
									@if (ShowLists)
									{
										<VoiceCommandListComponent CommandSet="@CommandSet" VoiceCommand="@voiceCommand" Show="@ShowLists" />
									}
									@if (ShowCode)
									{
										<VoiceCommandContentComponent VoiceCommandContent="@voiceCommand.VoiceCommandContents.FirstOrDefault()" />
									}
								}
							}
						</table>
					}
				</tr>
			}
		</tbody>
	</table>
}
