@page "/"
@using StreamDeckPedals.Services
@inject IStreamDeckPedalService StreamDeckService
@implements IDisposable

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1>Stream Deck Pedal Controller</h1>
            <hr />
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Connection Status</h5>
                </div>
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <span class="badge @(isConnected ? "bg-success" : "bg-danger") me-2">
                            @(isConnected ? "Connected" : "Disconnected")
                        </span>
                        @if (!isConnected)
                        {
                            <button class="btn btn-primary btn-sm" @onclick="ConnectAsync">
                                Connect
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-secondary btn-sm" @onclick="DisconnectAsync">
                                Disconnect
                            </button>
                        }
                    </div>
                    @if (!string.IsNullOrEmpty(statusMessage))
                    {
                        <p class="mt-2 mb-0 text-muted">@statusMessage</p>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>Current Menu</h5>
                </div>
                <div class="card-body">
                    <h6>@currentMenuName</h6>
                    @if (isInMenuMode)
                    {
                        <span class="badge bg-info">Menu Mode Active</span>
                    }
                    else
                    {
                        <span class="badge bg-secondary">Main Menu</span>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>Pedal Actions</h5>
                </div>
                <div class="card-body">
                    @if (currentPedalActions.Any())
                    {
                        <div class="row">
                            @foreach (var pedal in currentPedalActions.OrderBy(p => p.Key))
                            {
                                <div class="col-md-4 mb-3">
                                    <div class="card border-primary">
                                        <div class="card-header bg-primary text-white">
                                            <h6 class="mb-0">Pedal @(pedal.Key + 1)</h6>
                                        </div>
                                        <div class="card-body">
                                            <p class="card-text">@pedal.Value</p>
                                            <button class="btn btn-outline-primary btn-sm" 
                                                    @onclick="() => SimulatePedalPress(pedal.Key)"
                                                    disabled="@(!isConnected)">
                                                Simulate Press
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No pedal actions available</p>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (statusHistory.Any())
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h5>Activity Log</h5>
                    </div>
                    <div class="card-body" style="max-height: 300px; overflow-y: auto;">
                        @foreach (var status in statusHistory.TakeLast(10).Reverse())
                        {
                            <div class="d-flex justify-content-between align-items-center border-bottom py-1">
                                <span>@status.Message</span>
                                <small class="text-muted">@status.Timestamp.ToString("HH:mm:ss")</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool isConnected = false;
    private bool isInMenuMode = false;
    private string currentMenuName = "Main Menu";
    private string statusMessage = "";
    private Dictionary<int, string> currentPedalActions = new();
    private List<StatusMessage> statusHistory = new();

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to events
        StreamDeckService.ConnectionChanged += OnConnectionChanged;
        StreamDeckService.MenuChanged += OnMenuChanged;
        StreamDeckService.StatusUpdated += OnStatusUpdated;

        // Initialize connection
        await StreamDeckService.InitializeAsync();
        
        // Update initial state
        isConnected = StreamDeckService.IsConnected;
        isInMenuMode = StreamDeckService.IsInMenuMode;
        currentMenuName = StreamDeckService.CurrentMenuName;
        currentPedalActions = StreamDeckService.CurrentPedalActionObjects
                                .ToDictionary(kvp => kvp.Key, kvp => kvp.Value.Name);

        StateHasChanged();
    }

    private async Task ConnectAsync()
    {
        await StreamDeckService.InitializeAsync();
    }

    private async Task DisconnectAsync()
    {
        await StreamDeckService.DisconnectAsync();
    }    private async Task SimulatePedalPress(int pedalIndex)
    {
        // This simulates a pedal press for testing purposes
        if (StreamDeckService is StreamDeckPedalService service)
        {
            // Use reflection to access the private field
            var controllerField = service.GetType().GetField("_pedalController", 
                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
            
            if (controllerField?.GetValue(service) is IStreamDeckPedalController controller)
            {
                await controller.OnPedalPressedAsync(pedalIndex);
            }
        }
    }

    private void OnConnectionChanged(object? sender, bool connected)
    {
        isConnected = connected;
        InvokeAsync(StateHasChanged);
    }

    private void OnMenuChanged(object? sender, MenuChangedEventArgs e)
    {
        isInMenuMode = e.IsInMenuMode;
        currentMenuName = e.MenuName;
        currentPedalActions = e.PedalActions;
        InvokeAsync(StateHasChanged);
    }

    private void OnStatusUpdated(object? sender, string status)
    {
        statusMessage = status;
        statusHistory.Add(new StatusMessage { Message = status, Timestamp = DateTime.Now });
        
        // Keep only last 50 messages
        if (statusHistory.Count > 50)
        {
            statusHistory.RemoveAt(0);
        }
        
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        if (StreamDeckService != null)
        {
            StreamDeckService.ConnectionChanged -= OnConnectionChanged;
            StreamDeckService.MenuChanged -= OnMenuChanged;
            StreamDeckService.StatusUpdated -= OnStatusUpdated;
        }
    }

    private class StatusMessage
    {
        public string Message { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }
}
