@page "/talon-list-search"
@inject DataAccessLibrary.Services.ITalonVoiceCommandDataService TalonService

<div class="talon-list-search-container">
    <h3>Talon List Search</h3>
    <div class="row g-2 align-items-end mb-3">
        <div class="col-12 col-md-6">
            <label for="listNameFilter" class="form-label">Filter by List Name: <span class="text-muted small ms-1">(Alt+L)</span></label>
            <input id="listNameFilter" class="form-control" @bind="ListNameFilter" placeholder="Enter list name..." accesskey="l" />
        </div>
        <div class="col-12 col-md-6">
            <label for="listValueFilter" class="form-label">Filter by List Value: <span class="text-muted small ms-1">(Alt+V)</span></label>
            <input id="listValueFilter" class="form-control" @bind="ListValueFilter" placeholder="Enter list value..." accesskey="v" />
        </div>
    </div>
    <div class="mb-3">
        <button class="btn btn-primary" @onclick="OnSearch" accesskey="b">Search <span class="text-muted small ms-1">(Alt+B)</span></button>
    </div>
    <div class="mt-4">
        <h5>Results found @FilteredResults.Count</h5>
        @if (FilteredResults.Count == 0)
        {
            <div class="alert alert-info" role="alert">No lists found.</div>
        }
        else
        {
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>List Name</th>
                        <th>Spoken Form</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in FilteredResults)
                    {
                        <tr>
                            <td>@item.ListName</td>
                            <td>@item.SpokenForm</td>
                            <td>@item.ListValue</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    public string ListNameFilter { get; set; } = string.Empty;
    public string ListValueFilter { get; set; } = string.Empty;
    public List<DataAccessLibrary.Models.TalonList> AllLists { get; set; } = new();
    public List<DataAccessLibrary.Models.TalonList> FilteredResults { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAllLists();
        ApplyFilters();
    }

    private async Task LoadAllLists()
    {
        if (TalonService != null)
            AllLists = await TalonService.GetAllTalonListsAsync();
        else
            AllLists = new List<DataAccessLibrary.Models.TalonList>();
    }

    private void ApplyFilters()
    {
        IEnumerable<DataAccessLibrary.Models.TalonList> query = AllLists;
        if (!string.IsNullOrWhiteSpace(ListNameFilter))
            query = query.Where(x => x.ListName.Contains(ListNameFilter, StringComparison.OrdinalIgnoreCase));
        if (!string.IsNullOrWhiteSpace(ListValueFilter))
            query = query.Where(x => x.ListValue.Contains(ListValueFilter, StringComparison.OrdinalIgnoreCase) || x.SpokenForm.Contains(ListValueFilter, StringComparison.OrdinalIgnoreCase));
        FilteredResults = query.ToList();
    }

    private void OnSearch()
    {
        ApplyFilters();
    }
}
