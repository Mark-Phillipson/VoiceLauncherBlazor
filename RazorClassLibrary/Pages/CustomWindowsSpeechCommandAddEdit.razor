1.
<div style="min-width:80vw">
    <EditForm Model="@CustomWindowsSpeechCommandDTO" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        @*<ValidationSummary />*@
        @if (CustomWindowsSpeechCommandDTO.Id > 0)
        {
            <span class="text-info m-1">@CustomWindowsSpeechCommandDTO.Id</span>
        }
        <div class="row">
            <div class="col-4">
                <div class="form-group">
                    <label for="WaitTime">Wait Time (Alt+1)</label> <i class="text-danger fa">*</i>
                    <InputNumber accesskey="1" id="WaitTime" class="form-control"
                        @bind-Value="@CustomWindowsSpeechCommandDTO.WaitTime">
                    </InputNumber>
                    <ValidationMessage For="@(() => CustomWindowsSpeechCommandDTO.WaitTime)" />
                </div>

                <div class="form-group">
                    <label for="TextToEnter">Text To Enter: (Alt+2) </label>
                    <InputText accesskey="2" id="CommandTextToEnter" class="form-control"
                        @bind-Value="@CustomWindowsSpeechCommandDTO.TextToEnter"
                        @onblur="@(() => CallChangeAsync("CommandTextToEnter"))" placeholder="Enter Text To Enter">
                    </InputText>
                    <ValidationMessage For="@(() => CustomWindowsSpeechCommandDTO.TextToEnter)" />
                </div>
                <div class="form-group">
                    <label for="KeyDownValue">Key Down Value: (Alt+3)</label>
                    <input accesskey="3" class="form-control" type="text" placeholder="Filter" @bind="@KeyDownFilter"
                        @bind:event="oninput" />
                    <InputSelectEnum @bind-Value="CustomWindowsSpeechCommandDTO.KeyDownValue" class="form-select">
                    </InputSelectEnum>
                    <ValidationMessage For="@(() => CustomWindowsSpeechCommandDTO.KeyDownValue)" />
                </div>
                <div class="form-group row">
                    <label for="1" class="col-6"> Control Key (Alt+4)</label>
                    <InputCheckbox accesskey="4" @bind-Value="CustomWindowsSpeechCommandDTO.ControlKey"
                        class="form-checkbox col-6" />
                </div>
                <div class="form-group row">
                    <label for="1" class="col-6"> Alternate Key (Alt+5)</label>
                    <InputCheckbox accesskey="5" @bind-Value="CustomWindowsSpeechCommandDTO.AlternateKey"
                        class="form-checkbox col-6" />
                </div>
                <div class="form-group row">
                    <label for="1" class="col-6"> Shift Key (Alt+6)</label>
                    <InputCheckbox accesskey="6" @bind-Value="CustomWindowsSpeechCommandDTO.ShiftKey"
                        class="form-checkbox col-6" />
                </div>
                <div class="form-group row">
                    <label for="1" class="col-6"> Windows Key</label>
                    <InputCheckbox @bind-Value="CustomWindowsSpeechCommandDTO.WindowsKey" class="form-checkbox col-6" />
                </div>

            </div>
            <div class="col-4">
                <div class="form-group">
                    <label for="KeyPressValue">Key Press Value: (Alt+7)</label>
                    <input accesskey="7" class="form-control" type="text" placeholder="Filter" @bind="@KeyPressFilter"
                        @bind:event="oninput" />
                    <InputSelectEnum @bind-Value="CustomWindowsSpeechCommandDTO.KeyPressValue" class="form-select" />
                    <ValidationMessage For="@(() => CustomWindowsSpeechCommandDTO.KeyPressValue)" />
                </div>
                <div class="form-group">
                    <label for="KeyUpValue">Key Up Value: (Alt+8)</label>
                    <input accesskey="8" class="form-control" type="text" placeholder="Filter" @bind="@KeyUpFilter"
                        @bind:event="oninput" />
                    <InputSelectEnum @bind-Value="CustomWindowsSpeechCommandDTO.KeyUpValue" class="form-select" />
                    <ValidationMessage For="@(() => CustomWindowsSpeechCommandDTO.KeyUpValue)" />
                </div>
                <div class="form-group">
                    <label for="MouseCommand">Mouse Command: (Alt+9)</label>
                    <InputSelect accesskey="9" @bind-Value="CustomWindowsSpeechCommandDTO.MouseCommand"
                        class="form-select">
                        <option value="">-</option>
                        @foreach (string item in MouseMethods)
                        {
                            <option>@item</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => CustomWindowsSpeechCommandDTO.MouseCommand)" />
                </div>
                @if (CustomWindowsSpeechCommandDTO.MouseCommand == "MoveMouseBy")
                {
                    <div class="form-group">
                        <label for="MouseMoveX">Move Mouse X</label> <i class="text-danger fa">*</i>
                        <InputNumber id="MouseMoveX" class="form-control"
                            @bind-Value="@CustomWindowsSpeechCommandDTO.MouseMoveX">
                        </InputNumber>
                        <ValidationMessage For="@(() => CustomWindowsSpeechCommandDTO.MouseMoveX)" />
                    </div>
                    <div class="form-group">
                        <label for="MouseMoveY">Move Mouse Y</label> <i class="text-danger fa">*</i>
                        <InputNumber id="MouseMoveY" class="form-control"
                            @bind-Value="@CustomWindowsSpeechCommandDTO.MouseMoveY">
                        </InputNumber>
                        <ValidationMessage For="@(() => CustomWindowsSpeechCommandDTO.MouseMoveY)" />
                    </div>
                }
                else if (CustomWindowsSpeechCommandDTO.MouseCommand == "MoveMouseTo")
                {
                    <div class="form-group">
                        <label for="AbsoluteX">Move Mouse To X</label> <i class="text-danger fa">*</i>
                        <InputNumber id="AbsoluteX" class="form-control"
                            @bind-Value="@CustomWindowsSpeechCommandDTO.AbsoluteX">
                        </InputNumber>
                        <ValidationMessage For="@(() => CustomWindowsSpeechCommandDTO.AbsoluteX)" />
                    </div>
                    <div class="form-group">
                        <label for="AbsoluteY">Move Mouse To Y</label> <i class="text-danger fa">*</i>
                        <InputNumber id="AbsoluteY" class="form-control"
                            @bind-Value="@CustomWindowsSpeechCommandDTO.AbsoluteY">
                        </InputNumber>
                        <ValidationMessage For="@(() => CustomWindowsSpeechCommandDTO.AbsoluteY)" />
                    </div>
                }
                else if (CustomWindowsSpeechCommandDTO.MouseCommand == "HorizontalScroll" ||
                CustomWindowsSpeechCommandDTO.MouseCommand == "VerticalScroll")
                {
                    <div class="form-group">
                        <label for="ScrollAmount">Scroll Amount</label> <i class="text-danger fa">*</i>
                        <InputNumber id="ScrollAmount" class="form-control"
                            @bind-Value="@CustomWindowsSpeechCommandDTO.ScrollAmount">
                        </InputNumber>
                        <ValidationMessage For="@(() => CustomWindowsSpeechCommandDTO.ScrollAmount)" />
                    </div>
                }
            </div>
            <div class="col-4">
                <div class="form-group">
                    <label for="ProcessStart">Process Start:</label>
                    <InputText id="ProcessStart" class="form-control"
                        @bind-Value="@CustomWindowsSpeechCommandDTO.ProcessStart"
                        @onblur="@(() => CallChangeAsync("ProcessStart"))" placeholder="Enter Process Start">
                    </InputText>
                    <ValidationMessage For="@(() => CustomWindowsSpeechCommandDTO.ProcessStart)" />
                </div>
                <div class="form-group">
                    <label for="CommandLineArguments">Command Line Arguments: </label>
                    <InputText id="CommandLineArguments" class="form-control"
                        @bind-Value="@CustomWindowsSpeechCommandDTO.CommandLineArguments"
                        @onblur="@(() => CallChangeAsync("CommandLineArguments"))"
                        placeholder="Enter Command Line Arguments"></InputText>
                    <ValidationMessage For="@(() => CustomWindowsSpeechCommandDTO.CommandLineArguments)" />
                </div>
                <div class="form-group">
                    <button class="btn btn-success" type="button" @onclick="@( ( ) => Control(  ) )">Control</button>
                    <button class="btn btn-success" type="button"
                        @onclick="@( ( ) => Alternate(  ) )">Alternate</button>
                    <button class="btn btn-success" type="button" @onclick="@( ( ) => Shift(  ) )">Shift</button>

                    <label for="SendKeysValue">Send Keys Value: (^=Ctrl %=Alt +=Shift)</label>
                    <InputText id="SendKeysValue" class="form-control"
                        @bind-Value="@CustomWindowsSpeechCommandDTO.SendKeysValue"
                        @onblur="@(() => CallChangeAsync("SendKeysValue"))" placeholder="Enter Send Keys Values">
                    </InputText>
                    <ValidationMessage For="@(() => CustomWindowsSpeechCommandDTO.SendKeysValue)" />
                </div>
                <div class="form-group">
                    <label for="formatDictation">Format Dictation: </label>
                    <InputSelect id="formatDictation" class="form-select border border-warning col-sm-8"
                        @bind-Value="@CustomWindowsSpeechCommandDTO.HowToFormatDictation">

                        @foreach (var formatDictation in FormatDictations)
                        {
                            @if (CustomWindowsSpeechCommandDTO.HowToFormatDictation == formatDictation)
                            {
                                <option selected value="@formatDictation">@formatDictation</option>
                            }
                            <option value="@formatDictation">@formatDictation</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => CustomWindowsSpeechCommandDTO.HowToFormatDictation)" />
                </div>
                <div class="form-group">
                    <label for="MethodToCall">Method to Call: </label>
                    <InputText id="MethodToCall" class="form-control"
                        @bind-Value="@CustomWindowsSpeechCommandDTO.MethodToCall"
                        @onblur="@(() => CallChangeAsync("MethodToCall"))" placeholder="Enter Method to Call">
                    </InputText>
                    <ValidationMessage For="@(() => CustomWindowsSpeechCommandDTO.MethodToCall)" />
                </div>
                <div class="btn-group" style="float:right">
                    <a accesskey="c" class="btn btn-lg btn-outline-primary" @onclick="@Close"><u>C</u>ancel</a>
                    <button @TaskRunning accesskey="s" type="submit" class="btn btn-lg btn-primary"><u>S</u>ave
                        Record</button>
                </div>
            </div>
        </div>

    </EditForm>
</div>
