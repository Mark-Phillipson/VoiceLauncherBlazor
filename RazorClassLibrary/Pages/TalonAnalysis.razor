@page "/talon-analysis"
@using RazorClassLibrary.Models
@using RazorClassLibrary.Services
@inject IJSRuntime JSRuntime

<PageTitle>Talon Command Analysis</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <i class="fas fa-chart-bar me-2"></i>
                Talon Command Analysis
            </h1>
              <!-- Navigation Links -->
            <div class="row mb-4">
                <div class="col-12">
                    <div class="btn-group" role="group" aria-label="Talon Tools Navigation">
                        <a href="/talon-voice-command-search" class="btn btn-outline-primary">
                            <i class="oi oi-magnifying-glass me-1"></i> Search Commands
                        </a>
                        @if (!isHybridMode)
                        {
                            <span class="btn btn-info disabled">
                                <i class="oi oi-graph me-1"></i> Analysis Report
                            </span>
                            <a href="/talon-import" class="btn btn-outline-secondary">
                                <i class="oi oi-cloud-upload me-1"></i> Import Scripts
                            </a>
                        }
                    </div>
                </div>
            </div>
            
            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Analyzing Talon commands...</p>
                </div>
            }
            else if (analysisResult != null)
            {
                <!-- Summary Cards -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card bg-primary text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h4 class="card-title">@analysisResult.TotalCommands.ToString("N0")</h4>
                                        <p class="card-text">Total Commands</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-list fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-3">
                        <div class="card bg-info text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h4 class="card-title">@analysisResult.UniqueCommands.ToString("N0")</h4>
                                        <p class="card-text">Unique Commands</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-filter fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-3">
                        <div class="card bg-warning text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h4 class="card-title">@analysisResult.TotalConflicts.ToString("N0")</h4>
                                        <p class="card-text">Total Conflicts</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-exclamation-triangle fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-md-3">
                        <div class="card bg-danger text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h4 class="card-title">@analysisResult.GlobalConflicts.ToString("N0")</h4>
                                        <p class="card-text">Critical Conflicts</p>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-times-circle fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Repository Statistics -->
                <div class="row">
                    <div class="col-lg-6">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">
                                    <i class="fas fa-code-branch me-2"></i>
                                    Repository Statistics
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>Repository</th>
                                                <th class="text-end">Commands</th>
                                                <th class="text-end">Conflicts</th>
                                                <th class="text-end">Conflict %</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var repo in analysisResult.RepositoryStats)
                                            {
                                                <tr>
                                                    <td>
                                                        <span class="badge bg-secondary">@repo.Repository</span>
                                                    </td>
                                                    <td class="text-end">@repo.CommandCount.ToString("N0")</td>
                                                    <td class="text-end">
                                                        @if (repo.ConflictCount > 0)
                                                        {
                                                            <span class="badge bg-warning">@repo.ConflictCount</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">0</span>
                                                        }
                                                    </td>
                                                    <td class="text-end">
                                                        @if (repo.ConflictPercentage > 0)
                                                        {
                                                            <span class="text-warning">@repo.ConflictPercentage.ToString("F1")%</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted">0%</span>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="col-lg-6">
                        <div class="card">
                            <div class="card-header">
                                <h5 class="mb-0">
                                    <i class="fas fa-chart-pie me-2"></i>
                                    Command Distribution
                                </h5>                            </div>                            <div class="card-body">
                                <div style="position: relative; height: 400px; width: 100%;">
                                    <canvas id="applicationChart"></canvas>
                                </div>
                                <div class="mt-3">
                                    <small class="text-muted">Distribution of commands by application</small>
                                    @if (analysisResult?.ApplicationStats != null && analysisResult.ApplicationStats.Any())
                                    {                                        <div class="mt-2">
                                            <small class="text-info">Found @analysisResult.ApplicationStats.Count applications</small>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="mt-2">
                                            <small class="text-warning">No application data available</small>
                                        </div>                                    }                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Global Conflicts -->
                @if (analysisResult?.GlobalConflictDetails?.Any() == true)
                {
                    <div class="card mt-4">
                        <div class="card-header">                            <h5 class="mb-0">
                                <i class="fas fa-exclamation-triangle me-2 text-danger"></i>
                                Global Command Analysis (@analysisResult.GlobalConflictDetails.Count items, @analysisResult.GlobalConflicts conflicts)
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="accordion" id="globalConflictsAccordion">
                                @for (int i = 0; i < Math.Min(analysisResult.GlobalConflictDetails.Count, 10); i++)
                                {
                                    var conflict = analysisResult.GlobalConflictDetails[i];
                                    var accordionId = $"globalConflict{i}";
                                    
                                    <div class="accordion-item">
                                        <h2 class="accordion-header">
                                            <button class="accordion-button collapsed" type="button" 
                                                    data-bs-toggle="collapse" data-bs-target="#@accordionId">
                                                <div class="w-100">                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <span>
                                                            <strong>'@conflict.Command'</strong>                                                            @switch (conflict.ConflictType)
                                                            {
                                                                case ConflictType.TrueConflict:
                                                                    <span class="badge bg-danger ms-2">True Conflict</span>
                                                                    break;
                                                                case ConflictType.AlternativeImplementations:
                                                                    <span class="badge bg-info ms-2">Alternative Implementations</span>
                                                                    break;
                                                                case ConflictType.TagBasedMutuallyExclusive:
                                                                    <span class="badge bg-success ms-2">Tag-based (No Conflict)</span>
                                                                    break;
                                                                case ConflictType.OperatingSystemSpecific:
                                                                    <span class="badge bg-secondary ms-2">OS-specific (No Conflict)</span>
                                                                    break;
                                                            }
                                                        </span>
                                                        <span class="badge bg-warning">@string.Join(" vs ", conflict.Repositories)</span>
                                                    </div>
                                                </div>
                                            </button>
                                        </h2>
                                        <div id="@accordionId" class="accordion-collapse collapse" 
                                             data-bs-parent="#globalConflictsAccordion">
                                            <div class="accordion-body">
                                                <div class="row">
                                                    <div class="col-md-6">
                                                        <h6>Conflict Details:</h6>
                                                        <ul class="list-unstyled">
                                                            <li><strong>Application:</strong> @conflict.Application</li>
                                                            <li><strong>Instances:</strong> @conflict.InstanceCount</li>
                                                            <li><strong>Repositories:</strong> @string.Join(", ", conflict.Repositories)</li>
                                                        </ul>
                                                    </div>
                                                    <div class="col-md-6">
                                                        <h6>Implementations:</h6>                                                        @foreach (var impl in conflict.Implementations)
                                                        {
                                                            <div class="mb-3">
                                                                <strong>[@impl.Repository] (@impl.Context):</strong>
                                                                <div class="mt-1">
                                                                    @if (!string.IsNullOrEmpty(impl.Mode))
                                                                    {
                                                                        <span class="badge bg-primary me-1">Mode: @impl.Mode</span>
                                                                    }
                                                                    @if (!string.IsNullOrEmpty(impl.Tags))
                                                                    {
                                                                        <span class="badge bg-info me-1">Tags: @impl.Tags</span>
                                                                    }
                                                                    @if (!string.IsNullOrEmpty(impl.OperatingSystem))
                                                                    {
                                                                        <span class="badge bg-secondary me-1">OS: @impl.OperatingSystem</span>
                                                                    }
                                                                    @if (!string.IsNullOrEmpty(impl.CodeLanguage))
                                                                    {
                                                                        <span class="badge bg-success me-1">Code Lang: @impl.CodeLanguage</span>
                                                                    }
                                                                    @if (!string.IsNullOrEmpty(impl.Language))
                                                                    {
                                                                        <span class="badge bg-warning text-dark me-1">Language: @impl.Language</span>
                                                                    }
                                                                    @if (!string.IsNullOrEmpty(impl.Hostname))
                                                                    {
                                                                        <span class="badge bg-dark me-1">Host: @impl.Hostname</span>
                                                                    }
                                                                </div>
                                                                <code class="d-block mt-1 p-2 bg-light">@impl.Script</code>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            
                            @if (analysisResult.GlobalConflictDetails.Count > 10)
                            {
                                <div class="alert alert-info mt-3">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Showing top 10 conflicts. Total: @analysisResult.GlobalConflictDetails.Count
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- Application-Specific Conflicts -->
                @if (analysisResult?.AppConflictDetails?.Any() == true)
                {
                    <div class="card mt-4">
                        <div class="card-header">
                            <h5 class="mb-0">
                                <i class="fas fa-desktop me-2 text-warning"></i>
                                Application-Specific Conflicts (@analysisResult.AppSpecificConflicts)
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Command</th>
                                            <th>Application</th>
                                            <th>Repositories</th>
                                            <th class="text-center">Different Scripts</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var conflict in analysisResult.AppConflictDetails)
                                        {
                                            <tr>
                                                <td><code>@conflict.Command</code></td>
                                                <td><span class="badge bg-primary">@conflict.Application</span></td>
                                                <td>@string.Join(", ", conflict.Repositories)</td>
                                                <td class="text-center">
                                                    @if (conflict.HasDifferentImplementations)
                                                    {
                                                        <i class="fas fa-exclamation-triangle text-warning"></i>
                                                    }
                                                    else
                                                    {
                                                        <i class="fas fa-check text-success"></i>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    Unable to load analysis data. Please try refreshing the page.
                </div>
            }
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>    
    window.initApplicationChart = (data) => {        // Store data for potential retry
        window.lastChartData = data;
        
        const initChart = (retryCount = 0) => {
            try {
                
                // Ensure data is an array
                let chartDataArray;
                if (Array.isArray(data)) {
                    chartDataArray = data;
                } else if (data && typeof data === 'object') {
                    // If it's a single object, wrap it in an array
                    chartDataArray = [data];
                } else {
                    console.error('Invalid data format:', data);
                    return;
                }
                  console.log('Chart data array length:', chartDataArray.length);
                console.log('First few items:', chartDataArray.slice(0, 3));
                console.log('All chart data:', chartDataArray);
                
                // Check if Chart.js is loaded
                if (typeof Chart === 'undefined') {
                    console.error('Chart.js is not loaded');
                    return;
                }
                
                // Get the canvas element
                const canvas = document.getElementById('applicationChart');
                if (!canvas) {
                    if (retryCount < 10) {
                        console.log('Canvas not found, retrying in 100ms...');
                        setTimeout(() => initChart(retryCount + 1), 100);
                        return;
                    } else {
                        console.error('Canvas element with id "applicationChart" not found after 10 retries');
                        return;
                    }
                }
                
                console.log('Canvas found:', canvas);
                const ctx = canvas.getContext('2d');                // Prepare data - group items less than 3% into "Others"
                const sortedData = chartDataArray.sort((a, b) => b.commandCount - a.commandCount);
                const mainApplications = sortedData.filter(app => app.percentage >= 3.0);
                const smallApplications = sortedData.filter(app => app.percentage < 3.0);
                
                let chartData = [...mainApplications];
                
                // If there are small applications, group them as "Others"
                if (smallApplications.length > 0) {
                    const othersCount = smallApplications.reduce((sum, app) => sum + app.commandCount, 0);
                    const othersPercentage = smallApplications.reduce((sum, app) => sum + app.percentage, 0);
                    chartData.push({
                        application: 'Others',
                        commandCount: othersCount,
                        percentage: othersPercentage
                    });
                }
                  console.log('Chart data prepared:', chartData);
                console.log('Chart labels:', chartData.map(d => d.application));
                console.log('Chart values:', chartData.map(d => d.commandCount));
                console.log('Chart percentages:', chartData.map(d => d.percentage.toFixed(1) + '%'));
                
                // Destroy existing chart if it exists
                if (window.applicationChart && typeof window.applicationChart.destroy === 'function') {
                    window.applicationChart.destroy();
                }
                  window.applicationChart = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: chartData.map(d => d.application || 'Unknown'),
                        datasets: [{
                            data: chartData.map(d => d.commandCount),
                            backgroundColor: chartData.map((d, index) => {
                                // Special color for "Others" to make it distinct
                                if (d.application === 'Others') {
                                    return '#6c757d'; // Gray color for Others
                                }
                                // Use different colors for main applications
                                const colors = [
                                    '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0',
                                    '#9966FF', '#FF9F40', '#FF6B6B', '#4ECDC4',
                                    '#45B7D1', '#96CEB4', '#FFEAA7'
                                ];
                                return colors[index % colors.length];
                            }),
                            borderWidth: 2,
                            borderColor: '#fff'
                        }]
                    },options: {
                        responsive: true,
                        maintainAspectRatio: true,
                        aspectRatio: 1,                            plugins: {
                                legend: {
                                    position: 'bottom',
                                    labels: {
                                        padding: 15,
                                        usePointStyle: true,
                                        color: '#f8f9fa', // Very light color for maximum visibility
                                        font: {
                                            size: 14,
                                            weight: 'bold',
                                            family: 'Arial, sans-serif'
                                        },
                                        boxWidth: 15,
                                        boxHeight: 15,
                                        generateLabels: function(chart) {
                                            const data = chart.data;
                                            if (data.labels.length && data.datasets.length) {
                                                return data.labels.map((label, i) => {
                                                    const dataset = data.datasets[0];
                                                    const value = dataset.data[i];
                                                    const percentage = chartData[i].percentage;
                                                    return {
                                                        text: `${label}: ${value} (${percentage.toFixed(1)}%)`,
                                                        fillStyle: dataset.backgroundColor[i],
                                                        strokeStyle: '#ffffff',
                                                        lineWidth: 2,
                                                        index: i,
                                                        fontColor: '#ffffff' // Force white text color
                                                    };
                                                });
                                            }
                                            return [];
                                        }
                                    }
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function(context) {
                                            const data = chartData[context.dataIndex];
                                            return `${context.label}: ${context.parsed} commands (${data.percentage.toFixed(1)}%)`;
                                        }
                                    }
                                }
                            }
                    }
                });
                
                console.log('Chart created successfully:', window.applicationChart);
            } catch (error) {
                console.error('Error creating application chart:', error);
            }
        };
        
        // Start the initialization
        initChart();
    };
</script>
