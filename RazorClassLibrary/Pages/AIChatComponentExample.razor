@page "/chat"
<PageTitle>AI Chat Component Example</PageTitle>
@using RazorClassLibrary.Components
<h4>AI Chat </h4>
@if (!string.IsNullOrWhiteSpace(Message))
{
    <div class="alert alert-danger" role="alert">@Message</div>
}
<div class='row'>
    <div class='col-md-5'>
        @if (prompts != null)
        {
            <label for='selectedPromptId'>Select a Predefined Prompt</label>
            <a target="_blank" class='btn btn-link btn-sm' href="/prompts">Manage Prompts</a>
            <InputSelect id='selectedPromptId' ValueExpression="@(() => selectedPromptId)" Value="@selectedPromptId"
                ValueChanged="@((int value) => OnValueChangedMethodName(value))" class="form-select">
                @foreach (var item in prompts)
                {
                    if (item.Id == selectedPrompt?.Id)
                    {
                        <option selected value="@item.Id">@item.Description</option>
                    }
                    else
                    {

                        <option value="@item.Id">@item.Description</option>
                    }
                }
            </InputSelect>
        }
        @if (selectedPrompt != null)
        {
            <label class='m-1'>Included Data:</label>
            @selectedPrompt?.Description
        }
        @foreach (var item in chatHistory)
        {
            @if (item.Role.Label.ToLower() == "system")
            {
                <div class="m-1 text-danger">
                    <span>@item.Content</span>
                </div>
            }
            else
            {
                <div class="m-1 text-success">
                    <span>@item.Content</span>
                </div>
            }
        }
        <label class='sr-only m-1' for='inputElement'>Chat Message</label>
        <textarea rows='4' id='inputElement' @ref="inputElement" class='form-control m-1' @bind-value='@prompt'
            @bind-value:event='oninput' placeholder='Enter some text to chat (Enter to send)' @onkeydown="EnteredChat">
            @prompt
                    </textarea>
        <button accesskey='c' class="btn btn-outline-success btn-lg m-1" type="button"
            @onclick="@(() => ProcessChat())"><u>C</u>hat</button>
        <button accesskey='l' class="btn btn-outline-warning btn-lg m-1" type="button"
            @onclick="@(() => Clear())">C<u>l</u>ear</button>
        <button accesskey='t' class="btn btn-outline-danger btn-lg m-1" type="button"
            @onclick="@(() => Forget())">Forge<u>t</u></button>
        @if (selectedPrompt?.Description == "Do Dictation" && !string.IsNullOrWhiteSpace(TextBlock))
        {
            <button accesskey='y' id="CopyButton" type="button" class="btn btn-outline-primary btn-lg"
                @onclick="@(() => CopyItemAsync(TextBlock))">
                <i class="fa-regular fa-copy"></i>
                Cop<u>y</u>
            </button>
        }
        @if (selectedPrompt?.Description == "Do Dictation" && !string.IsNullOrWhiteSpace(AIComments))
        {
            <button accesskey='r' id="FocusResponseElement" type="button" class="btn btn-outline-primary btn-lg"
                @onclick="@(() => FocusResponseElement())">
                Focus <u>R</u>esponse
            </button>
        }
        @if (processing)
        {
            <div class="spinner-border text-primary m-2ay" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }
        <hr>
        <button class="btn btn-primary m-1" @onclick="@(() => ToggleHistory())">Response History <span
                class='badge bg-success'>@responseHistory?.Count</span></button>
        @if (showHistory)
        {
            @if (responseHistory != null && responseHistory.Count > 0)
            {
                historyCount = 0;
                @foreach (var item in responseHistory)
                {
                    historyCount++;
                    <ul>
                        <li class='text-danger'>Response # @historyCount</li>
                        <ul>
                            <li>
                                <MarkdownConverter MarkdownContent="@item.Content" />
                            </li>
                        </ul>
                    </ul>
                }
            }
        }

    </div>
    <div class='col-md-7'>
        @if (responseHistory?.Count > 0)
        {
            @if (string.IsNullOrWhiteSpace(TextBlock))
            {
                <MarkdownConverter MarkdownContent="@responseHistory?.LastOrDefault()?.Content" />
            }
            else
            {
                <textarea @ref='responseElement' class='form-control' rows="30">@TextBlock </textarea>
                @if (!string.IsNullOrWhiteSpace(AIComments))
                {
                    <div class="alert alert-info" role="alert">@AIComments</div>
                }
            }
        }
    </div>
</div>
<a class='btn-link m-2' href="/smart-components">Back to List of Smart Components</a>