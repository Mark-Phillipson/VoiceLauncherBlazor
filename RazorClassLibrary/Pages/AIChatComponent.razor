@page "/chat"
<PageTitle>AI Chat Component </PageTitle>
@using RazorClassLibrary.Components

<h4 class="text-light mb-1"><i class="fa-solid fa-comments"></i> AI Chat (Using o3-mini)</h4>
@if (!string.IsNullOrWhiteSpace(Message))
{
    <div class="alert alert-info" role="alert">@Message</div>
}

<div class='row'>
    <div class='col-md-5 bg-dark text-light p-2 rounded'>        @if (prompts != null)
        {
            <label for='selectedPromptId' class="form-label text-light"><i class="fa-solid fa-list"></i> Select a Predefined
                Prompt</label>
            @if (!RunningInBlazorHybrid)
            {
                <a target="_blank" class='btn btn-outline-primary btn-sm text-light ms-3'
                    href="@(selectedPrompt != null ? $"/prompt/{selectedPrompt.Id}" : "/prompts")">
                    <i class="fa-solid fa-pen-to-square"></i> Manage
                </a>
            }
            <InputSelect id='selectedPromptId' ValueExpression="@(() => selectedPromptId)" Value="@selectedPromptId"
                ValueChanged="@((int value) => OnValueChangedMethodName(value))"
                class="form-select bg-success text-light m-1">
                @foreach (var item in prompts)
                {
                    if (item.Id == selectedPrompt?.Id)
                    {
                        <option selected value="@item.Id">@item.Description</option>
                    }
                    else
                    {
                        <option value="@item.Id">@item.Description</option>
                    }
                }
            </InputSelect>
        }
        <label class='sr-only m-1' for='inputElement'>Chat Message</label>
        <textarea rows='4' id='inputElement' @ref="inputElement"
            class='form-control m-1 text-light border border-success' style="background-color: #2a2a2a !important;"
            @bind-value='PromptInput' @bind-value:event='oninput'
            placeholder='Type or dictate your message. If debounce is enabled, it will send after a pause. Otherwise, press Enter or click Chat.'
            @onkeydown="OnInputKeyDown"></textarea>
        <div class="mb-2" style="display: flex; align-items: center; gap: 10px;">
            <input id="debounceToggle" type="checkbox" class="form-check-input" style="margin-bottom: 0;"
                @bind="DebounceEnabled" />
            <label for="debounceToggle" class="form-label text-light mb-0 me-2">Debounce</label>            <div class="d-none d-md-flex align-items-center">
                <label for="debounceBox" class="form-label text-light mb-0" style="@(RunningInBlazorHybrid ? "display:none;" : null)">Wait (ms):</label>
                <input id="debounceBox" type="number" min="100" max="10000" step="100"
                    class="form-control bg-dark text-light border-success text-end"
                    style="display: inline-block; margin-bottom: 0;width: 100px;@(RunningInBlazorHybrid ? "display:none;" : null)" @bind="DebounceMillisecondsInput"
                    disabled="@(DebounceEnabled ? null : "disabled")" />
            </div>
            @if (DebounceEnabled && debounceCountdown > 0)
            {
                <span class="badge bg-warning text-dark ms-2">Sending in @debounceCountdown ms...</span>
            }
            else
            {
                <span class="badge bg-warning text-dark ms-2">Type to Start </span>
            }
        </div>
        <div class="d-flex flex-wrap gap-2 mt-2">
            <button accesskey='c' class="btn btn-outline-success btn-sm" type="button"
                disabled="@(processing ? "disabled" : null)" @onclick="@(() => ProcessChat())"><i
                    class="fa-solid fa-paper-plane"></i> <u>C</u>hat</button>
            <button accesskey='l' class="btn btn-outline-success btn-sm" type="button"
                disabled="@(processing ? "disabled" : null)" @onclick="@(() => Clear())"><i
                    class="fa-solid fa-eraser"></i> C<u>l</u>ear</button>
            <button accesskey='t' class="btn btn-outline-danger btn-sm" type="button"
                disabled="@(processing ? "disabled" : null)" @onclick="@(() => Forget())"><i
                    class="fa-solid fa-trash"></i> Forge<u>t</u></button>
            @if (selectedPrompt?.Description == "Do Dictation" && !string.IsNullOrWhiteSpace(AIComments))
            {
                <button accesskey='r' id="FocusResponseElement" type="button" class="btn btn-outline-success btn-sm"
                    @onclick="@(() => FocusResponseElement())">
                    <i class="fa-solid fa-crosshairs"></i> Focus <u>R</u>esponse
                </button> @if (responseHistory?.Count > 1)
                {
                    <button class='btn btn-outline-danger btn-sm' @onclick='@(() => RevertPrevious())'><i
                            class="fa-solid fa-arrow-left"></i> Previous</button>
                    <button class='btn btn-outline-danger btn-sm' @onclick='@(() => RevertNext())'><i
                            class="fa-solid fa-arrow-right"></i> Next</button>
                }
            }
            @if (RunningInBlazorHybrid && (chatHistory?.Count > 0 || !string.IsNullOrWhiteSpace(AIComments) ||
                        !string.IsNullOrWhiteSpace(TextBlock)))
            {
                @* <button accesskey='p' class="btn btn-outline-info btn-sm" type="button"
                    @onclick="@(() => CopyChatResultsAsync())">
                    <i class="fa-solid fa-clipboard"></i> Copy & <u>P</u>aste (Paste Not Currently Working)
                </button> *@
            }
        </div>
          <!-- QuickPrompts Section - Positioned below the Chat/Clear/Forget buttons -->
        <div class="mt-3">
            <label class="form-label text-light">
                <i class="fa-solid fa-bolt"></i> Quick Prompts
                <button type="button" class="btn btn-outline-info btn-sm ms-2" @onclick="ToggleQuickPromptPanel">
                    <i class="fa-solid @(showQuickPrompts ? "fa-eye-slash" : "fa-eye")"></i>
                    @(showQuickPrompts ? "Hide" : "Show")
                </button>
                @if (!RunningInBlazorHybrid)
                {
                    <a target="_blank" class='btn btn-outline-primary btn-sm text-light ms-1'
                        href="/quickpromptstable">
                        <i class="fa-solid fa-pen-to-square"></i> Manage
                    </a>
                }
            </label>
            
            <div class="input-group">
                <input type="text" 
                       class="form-control bg-dark text-light border-success quick-prompt-search" 
                       style="background-color: #2a2a2a !important;"
                       placeholder="Search quick prompts (command, type, description)..."
                       @bind="quickPromptSearchTerm"
                       @oninput="OnQuickPromptSearchInput" />
                <button class="btn btn-outline-secondary" type="button" @onclick="() => { quickPromptSearchTerm = string.Empty; FilterQuickPrompts(); }">
                    <i class="fa-solid fa-times"></i>
                </button>
            </div>
            
            @if (showQuickPrompts && filteredQuickPrompts.Count > 0)
            {
                <div class="mt-2 border border-success rounded p-2" style="max-height: 300px; overflow-y: auto; background-color: #1a1a1a;">
                    @foreach (var quickPrompt in filteredQuickPrompts)
                    {
                        <div class="d-flex justify-content-between align-items-start mb-2 p-2 border border-secondary rounded bg-dark quick-prompt-item">
                            <div class="flex-grow-1">
                                <div class="d-flex align-items-center mb-1">
                                    <span class="badge @GetQuickPromptTypeColorClass(quickPrompt.Type) me-2">@quickPrompt.Type</span>
                                    <strong class="text-light">@quickPrompt.Command</strong>
                                </div>
                                <small class="text-muted d-block">@quickPrompt.Description</small>
                                <small class="text-secondary" style="font-size: 0.75rem;">
                                    @(quickPrompt.PromptText.Length > 100 
                                        ? quickPrompt.PromptText.Substring(0, 100) + "..." 
                                        : quickPrompt.PromptText)
                                </small>
                            </div>
                            <button class="btn btn-success btn-sm ms-2" 
                                    type="button" 
                                    @onclick="() => ApplyQuickPrompt(quickPrompt)"
                                    title="Apply this quick prompt to current content">
                                <i class="fa-solid fa-play"></i> Apply
                            </button>
                        </div>
                    }
                </div>
            }
            
            @if (showQuickPrompts && !string.IsNullOrWhiteSpace(quickPromptSearchTerm) && filteredQuickPrompts.Count == 0)
            {
                <div class="alert alert-info mt-2">
                    <i class="fa-solid fa-info-circle"></i> No quick prompts found matching "@quickPromptSearchTerm"
                </div>
            }
        </div>

        @if (processing)
        {
            <div class="d-flex align-items-center m-2 p-3 bg-info bg-opacity-10 rounded border border-info" role="status"
                aria-live="polite" aria-label="AI is processing your request">
                <div class="spinner-border text-primary me-3" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
                <div>
                    <strong class="text-info">
                        <i class="fa-solid fa-brain me-2" aria-hidden="true"></i>AI is processing your request...
                    </strong>
                    <div class="small text-muted mt-1">
                        Please wait while the AI generates a response.
                    </div>
                </div>
            </div>
            @if (processing)
            {
                <button accesskey='x' class="btn btn-warning btn-lg" type="button" @onclick="@(() => CancelChat())"><i
                        class="fa-solid fa-stop"></i>Cancel (x)</button>
            }

        }
        <br />
        @if (selectedPrompt != null)
        {
            <label class='m-1 text-light'><i class="fa-solid fa-info-circle"></i> Current Prompt:</label>
        }
        @foreach (var item in chatHistory)
        {
            if (item == null) // Add this check to skip null items
            {
                continue;
            }

            @if (item.Role == Microsoft.SemanticKernel.ChatCompletion.AuthorRole.System)
            {
                <div class="chat-bubble system-bubble mb-3">
                    <div class="bubble-content @(expandedMessages.Contains(item) ? "expanded" : "")"
                        @onclick="@(() => ToggleMessageExpansion(item))">
                        <div class="bubble-header">
                            <i class="fa-solid fa-robot me-1"></i> System
                            @if (item.Content != null && item.Content.Length > 300) // Explicit null check for item.Content
                            {
                                <small><i
                                        class="fa-solid @(expandedMessages.Contains(item) ? "fa-chevron-up" : "fa-chevron-down")"></i></small>
                            }
                        </div>
                        <div class="bubble-text">                            @if (item.Content != null && item.Content.Length > 300 && !expandedMessages.Contains(item)) // Explicit null check
                            {
                                @($"{item.Content.Substring(0, 300)}...") // item.Content is now guaranteed non-null here
                            }
                            else
                            {
                                @item.Content // item.Content can be null, Razor handles rendering it as empty
                            }
                        </div>
                    </div>
                </div>
            }
            else // User role or other
            {
                <div class="chat-bubble user-bubble mb-3">
                    <div class="bubble-content">
                        <div class="bubble-header">
                            <i class="fa-solid fa-user me-1"></i> You
                        </div>                        <div class="bubble-text">
                            @(item.Content ?? string.Empty) // item is non-null here, item.Content can be null
                        </div>
                    </div>
                </div>
            }
        }

        <hr class="text-light">
        <button class="btn btn-outline-success m-1" @onclick="@(() => ToggleHistory())"><i
                class="fa-solid fa-history"></i> Response History <span
                class='badge bg-success'>@responseHistory?.Count</span></button>
        @if (showHistory)
        {
            @if (responseHistory != null && responseHistory.Count > 0)
            {
                historyCount = 0;
                @foreach (var item in responseHistory)
                {
                    historyCount++;
                    <ul>
                        <li class='text-danger'>Response # @historyCount</li>
                        <ul>
                            <li>
                                <MarkdownConverter MarkdownContent="@(item.Content ?? string.Empty)" />
                            </li>
                        </ul>
                    </ul>
                }
            }
        }
    </div>
    <div class='col-md-7 bg-dark text-light p-2 rounded'>
        @if (responseHistory?.Count > 0)
        {
            <button class="btn btn-outline-info mb-2" @onclick="ToggleFont">
                <i class="fa-solid fa-font"></i>
                @(useCascadiaCodeFont ? "Use Default Font" : "Use Cascadia Code Font")
            </button>
            @if (selectedPrompt?.Description == "Do Dictation" && !string.IsNullOrWhiteSpace(TextBlock))
            {
                <button accesskey='y' id="CopyButton" type="button" class="btn btn-outline-success mb-2"
                    @onclick="@(() => CopyItemAsync(TextBlock))">
                    <i class="fa-regular fa-copy"></i> Cop<u>y</u>
                </button>
            }
            @if (string.IsNullOrWhiteSpace(TextBlock) && string.IsNullOrWhiteSpace(AIComments))
            {
                <MarkdownConverter MarkdownContent="@responseHistory?.LastOrDefault()?.Content" />
            }
            else
            {
                <textarea @ref='responseElement' class='form-control text-light border-0'
                    style="background-color: #2a2a2a !important; font-family:@(useCascadiaCodeFont ? "Cascadia Code, Consolas, monospace" : "inherit");"
                    rows="30">@TextBlock </textarea>
                @if (!string.IsNullOrWhiteSpace(AIComments))
                {
                    <div class="alert alert-success" role="alert">@AIComments</div>
                }
            }
        }
        else {
            <div class="d-flex justify-content-center align-items-center border border-light" style="width:100%;height:300px;">
                <span class="text-muted">The Results Will Appear Here..</span>
            </div>
        }
    </div>
</div>
<div class='row'>
    <div class='col-12 text-secondary'>
        <p>
            Talon Command Reminder: Draft All (VSCode should be open), Draft This, Draft Submit, Voice Typing in Code,
            Voice Typing
        </p>
    </div>
</div>




