@page "/intellisenses"
@page "/intellisensesC/{categoryIdFilter:int}"
@page "/intellisensesL/{languageIdFilter:int}"
@page "/intellisensesBoth/{languageIdFilter:int}/{categoryIdFilter:int}"
@using RazorClassLibrary.Shared
@if (!RunningInBlazorHybrid)
{
	<header class="form-inline mx-1">
		<h4 style="display:inline-block">
			<i class="fa-solid fa-file-code"></i>
			@Title
		</h4>
	</header>
}
<div class="row">
	<div class='col-md-1'>
		<button title='Add New Snippet (Alt+0)' class="btn btn-sm btn-outline-success m-1" accesskey="0"
			@onclick="CreateNew"><i class="fas fa-plus"></i> Add</button>
	</div>
	@if (!RunningInBlazorHybrid)
	{
		<div class='col-md-2'>
			<input title='Filter by Language (Alt+1)' accesskey="1" style="display:inline" id="languageFilter"
				@oninput="@(e => CallChangeAsync("languageFilter"))" @bind="_languageFilter"
				placeholder="Language Filter (1)" class="mx-1 form-control col-md-1" />
		</div>
		<div class='col-md-2'>
			<input title='Filter by Category (Alt+2)' accesskey="2" style="display:inline" id="categoryFilter"
				@bind="_categoryFilter" @oninput="@(e => CallChangeAsync("categoryFilter"))"
				placeholder="Category Filter (2)" class="mx-1 form-control col-md-1" />
		</div>
		<div class='col-md-2'>
			<input title='Filter by Display and Send Keys' @bind="SearchTerm"
				@onblur="@(e => CallChangeAsync("SearchInput"))" id="SearchInput" class="form-control col-md-1"
				accesskey="3" placeholder="Blur to Filter (3)" />
		</div>
		@if (!RunningInBlazorHybrid)
		{
			<div class='col-md-1'>
				<label for='useSemanticMatching'>Semantic?</label>
				<input id='useSemanticMatching' title='Use Semantic Matching' type='checkbox' @bind='useSemanticMatching'
					class='form-checkbox' />
			</div>
		}
		<div class='col-md-1'>
			@if (!string.IsNullOrWhiteSpace(SearchTerm) || !string.IsNullOrWhiteSpace(language?.LanguageName) ||
					!string.IsNullOrWhiteSpace(category?.CategoryName) || _languageFilter != null || _categoryFilter != null)
			{
				<button title='Remove Filter (Alt+4)' accesskey="4" class="btn btn-sm btn-outline-primary m-1" type="button"
					@onclick="@( ( ) => RemoveFilter(  ) )"><i class="fa-solid fa-filter-circle-xmark"></i></button>
			}
			<button class="btn btn-outline-secondary btn-sm mx-1" type="button" @onclick="@( ( ) => LoadData(  ) )">
				<i class="fas fa-sync"></i>
			</button>
		</div>
	}
	else
	{
		<div class='col-md-3'>
			<input accesskey="1" style="display:inline" id="languageFilter"
				@oninput="@(e => CallChangeAsync("languageFilter"))" @bind="_languageFilter"
				placeholder="Language Filter (1)" class="mx-1 form-control col-md-1" />
		</div>
		<div class='col-md-3'>
			<input accesskey="2" style="display:inline" id="categoryFilter" @bind="_categoryFilter"
				@oninput="@(e => CallChangeAsync("categoryFilter"))" placeholder="Category Filter (2)"
				class="mx-1 form-control col-md-1" />
		</div>
		<div class='col-md-3'>
			<input title='Filter Display and Send Keys' @bind="SearchTerm" @onblur="@(e => CallChangeAsync("SearchInput"))"
				id="SearchInput" class="form-control col-md-1" accesskey="3" placeholder="Blur to Filter (3)" />
		</div>
		<div class='col-md-3'>
			<label for='useSemanticMatching'>Semantic?</label>
			<input id='useSemanticMatching' title='Use Semantic Matching' type='checkbox' @bind='useSemanticMatching'
				class='form-checkbox' />
			@if (!string.IsNullOrWhiteSpace(SearchTerm) || !string.IsNullOrWhiteSpace(language?.LanguageName) ||
					!string.IsNullOrWhiteSpace(category?.CategoryName) || _languageFilter != null || _categoryFilter != null)
			{
				<button accesskey="4" class="btn btn-sm btn-outline-primary m-1" type="button"
					@onclick="@( ( ) => RemoveFilter(  ) )"><i class="fa-solid fa-filter-circle-xmark"></i> (4)</button>
			}
		</div>
	}
	@if (!RunningInBlazorHybrid)
	{
		@if (showExtras)
		{
			<div class='col-md-4'>
				<label class="control-label mt-1 mx-1" for="_showTiles">Show <u>T</u>iles</label>
				<input accesskey="t" id="_showTiles" style='width:30px' @bind="_showTiles" type="checkbox"
					class="form-checkbox" />
			</div>
			<div class='col-md-4'>
				<label for="_showOnlyLanguageAndCategory" class="control-label mt-1"><u>H</u>ide</label>
				<input accesskey="h" id="_showOnlyLanguageAndCategory" style='width:30px' @bind="_showOnlyLanguageAndCategory"
					type="checkbox" class="form-checkbox" title='Hide Snippets' />
			</div>
		}
		<div class='col-md-2'>
			<label class="control-label mt-1 mx-1" for="showExtras">Show E<u>x</u>tras</label>
			<input accesskey="x" id="showExtras" @bind="showExtras" type="checkbox" class="form-checkbox"
				style='width:30px' />
		</div>
	}
</div>

@if (intellisenses == null && _loadFailed)
{
	<h1 class="text-danger">The data failed to load please try again in a little while..</h1>
}
else if (intellisenses == null)
{
	@if (!string.IsNullOrWhiteSpace(SearchTerm) || !string.IsNullOrWhiteSpace(_languageFilter) ||
			!string.IsNullOrWhiteSpace(_categoryFilter))
	{
		<Loading />
	}
	else
	{
		<p class='text-danger fs-1'>Please Enter a Filter above</p>
	}
}
else if (intellisenses.Count == 0)
{
	<text>No Snippets found</text>
}
else
{
	@if (_showTiles)
	{
		string group = "";
		counter = 0;
		alphabetCounter = 0;
		<div class="layout-as-cards">
			@foreach (var intellisense in intellisenses.OrderBy(v => v.Language!.LanguageName).ThenBy(v =>
					v.Category!.CategoryName))
			{
				@if (intellisense != null && group != intellisense.Language!.LanguageName + " / " +
						intellisense.Category!.CategoryName)
				{
					counter++;
					@if (counter < 10)
					{
						currentAcceleratorKey = counter + 4;
						temporaryAccessKey = currentAcceleratorKey.ToString();
					}
					else
					{
						temporaryAccessKey = "";
					}
					<div class="card p-2">
						<button accesskey="@temporaryAccessKey" class="btn"
							style="color:black;background-color:@intellisense.Language.Colour"
							@onclick="@(() => ApplySpecialFilter(intellisense.Language.Id,intellisense.Category.Id))">
							@intellisense.Language.LanguageName / @intellisense.Category.CategoryName
							@if (temporaryAccessKey != "")
							{
								<span>&nbsp;</span>

								<u>@temporaryAccessKey</u>
							}
						</button>
					</div>
				}
				@if (!_showOnlyLanguageAndCategory && Alphabet != null && intellisense != null)
				{
					alphabetCounter++;
					currentLetter = Alphabet.AlphabetList?.Where(x => x.Id == alphabetCounter).FirstOrDefault()?.Letter;
					<div class="card p-2" title="@intellisense.SendKeysValue">
						<div class="row">
							<div class="col-12">
								<div class="button-group"></div>
								<button class="btn btn-outline-warning" @onclick="@(() => EditAsync(intellisense.Id))"
									@onfocus="@(()=> ShowValue(intellisense.Id))">
									@intellisense.DisplayValue
									<i class="fa-regular fa-edit"></i>
								</button>
								<button accesskey="@currentLetter" class="btn btn-sm btn-outline-danger"
									@onclick="@(() => CopyAndPasteAsync(intellisense!.SendKeysValue ?? "",intellisense.Id))">
									<u>@currentLetter</u> <i class="fa-solid fa-paste"></i>
								</button>
							</div>
						</div>
					</div>
				}
				@if (intellisense != null)
				{
					group = (intellisense.Language?.LanguageName ?? "") + " / " + (intellisense.Category?.CategoryName ?? "");
				}
			}
		</div>
	}
	else
	{
		<table class="table table-dark table-sm table-bordered table-striped" id="table1">
			<thead>
				<tr>
					<th style="width: 60px">
						Language
						<button @onclick="@(e  => SortCustomIntelliSenses("LanguageName","Ascending"))"
							class="btn btn-sm btn-info"><i class="oi oi-sort-ascending"></i></button>
						<button @onclick="@(e => SortCustomIntelliSenses("LanguageName","Descending"))"
							class="btn btn-sm btn-info"><i class="oi oi-sort-descending"></i></button>
					</th>
					<th style="width: 60px">
						<div class="row">
							<div class="col-md-12">Category</div>
						</div>
					</th>
					<th>
						Display Value
						<button @onclick="@(e  => SortCustomIntelliSenses("DisplayValue","Ascending"))"
							class="btn btn-sm btn-info"><i class="oi oi-sort-ascending"></i></button>
						<button @onclick="@(e => SortCustomIntelliSenses("DisplayValue","Descending"))"
							class="btn btn-sm btn-info"><i class="oi oi-sort-descending"></i></button>

					</th>
					<th>SendKeys Value</th>
					<th style="width: 30px">Delivery Type</th>
					<th>
						<button accesskey="6" class="btn btn-sm btn-outline-success" @onclick="SaveAllCustomIntelliSenses">Save
							All (6) <i class="oi oi-hard-drive"></i></button>
					</th>
				</tr>
			</thead>
			<tbody>
				@{
					var counter = 6;
				}
				@foreach (var intellisense in intellisenses)
				{
					if (counter > 0)
					{
						counter++;
					}
					@if (intellisense != null)
					{
						<tr>
							<td>
								<input type="hidden" @bind="intellisense.Id" />
								<input type="hidden" @bind="intellisense.LanguageId" />
								<input type="hidden" @bind="intellisense.CategoryId" />
								<input type="hidden" @bind="intellisense.CommandType" />
								<input type="hidden" @bind="intellisense.Remarks" />
								<input type="hidden" @bind="intellisense.ComputerId" />
								<input disabled="disabled" class="form-control-sm" @bind="intellisense!.Language!.LanguageName" />
							</td>
							<td>
								<input disabled="disabled" type="text" class="form-control-sm"
									@bind="intellisense!.Category!.CategoryName" />
							</td>
							<td>
								<input class="form-control-sm" style="min-width: 200px" @bind="@intellisense.DisplayValue" />
							</td>
							<td>
								<textarea style="min-width: 380px;height: 60px" rows=3 title="@intellisense?.SendKeysValue"
									class="form-control-sm" @bind="@intellisense!.SendKeysValue"></textarea>
							</td>
							<td>
								<select style="min-width: 130px" class="form-select-sm col-md-8" @bind="@intellisense.DeliveryType">
									@if (GeneralLookups != null)
									{
										@foreach (var lookup in GeneralLookups)
										{
											@if (intellisense.DeliveryType == lookup.ItemValue)
											{
												<option selected value="@lookup.ItemValue">@lookup.ItemValue</option>

											}
											else
											{
												<option value="@lookup.ItemValue">@lookup.ItemValue</option>
											}
										}
									}
								</select>
							</td>

							<td>
								<button class="btn btn-outline-warning" @onclick="@(() => EditAsync(intellisense.Id))"><i
										class="oi oi-pencil"></i></button>
								<button class="btn btn-outline-danger" @onclick="@(() => ConfirmDelete(intellisense.Id))"><i
										class="oi oi-circle-x"></i></button>

								<button class="btn btn-outline-primary"
									@onclick="@(() => CopyItemAsync(intellisense.SendKeysValue,intellisense.Id))"><i
										class="fa-regular fa-copy"></i></button>

							</td>
						</tr>
					}
				}
			</tbody>
		</table>
	}

	<pre class='mt-2'>
																																											<code class='m-2'>
			@if (customIntelliSenseCurrent != null)
			{
																																																																																						<textarea rows="7" style='width:95%;color:white;background:black'>
					@customIntelliSenseCurrent.SendKeysValue
																																																																																																								</textarea>
			}
																																																</code>
																																																</pre>
}
@if (CustomIntellisenseIdDelete != null)
{
	<TemplatedDialog Show="ShowDialog">
		<ConfirmDialog Message="Please confirm you wish to Delete this Snippet!" Title="Confirmation Required"
			OnCancel="CancelDelete" OnConfirm="@(() => DeleteCustomIntelliSense((int)CustomIntellisenseIdDelete))">
		</ConfirmDialog>
	</TemplatedDialog>
}
