@inherits LayoutComponentBase
@using Blazored.Toast.Configuration
@using Blazored.Toast
@using RazorClassLibrary.Shared
@using Microsoft.AspNetCore.Components.Routing
@inject NavigationManager NavigationManager

<BlazoredToasts Position="ToastPosition.BottomRight" Timeout="5" IconType="IconType.FontAwesome"
    SuccessClass="success-toast-override" SuccessIcon="fa fa-thumbs-up" ErrorIcon="fa fa-bug" ShowProgressBar="true"
    RemoveToastsOnNavigation="true" InfoIcon="fa fa-info" WarningIcon="fa fa-warning" />

<div class="page">
    @if (ShowNavMenu)
    {
        <NavMenu />
    }
    <div class="top-row bg-dark">
        <button style='border-bottom:0;margin-top:2px' class="btn btn-dark btn-sm" type="button"
            title="Toggle Navigation Menu" @onclick="@( ( ) => ToggleShowNavMenu(  ) )">
            @if (!ShowNavMenu)
            {
                <i class="fa-solid fa-up-right-from-square"></i>
            }
            else
            {
                <i class="fa-solid fa-bars"></i>
            }
        </button>
    </div>
    <div class="main">
        <div class="content px-1">
            @Body
        </div>
    </div>
</div>
<footer class="center-footer">&copy; Voice Admin @DateTime.Now.Year,
    @if (Environment.MachineName == "J40L4V3")
    {
        <text>Powered by</text>
        @System.Runtime.InteropServices.RuntimeInformation.FrameworkDescription
    }
</footer>
@code {
    private bool ShowNavMenu = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        // Ensure NavMenu is shown by default and remove page-specific hiding logic
        ShowNavMenu = true; 
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    private void HandleLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        // Ensure NavMenu is shown by default and remove page-specific hiding logic
        ShowNavMenu = true;
        InvokeAsync(StateHasChanged); // Ensure UI updates
    }

    private void ToggleShowNavMenu()
    {
        ShowNavMenu = !ShowNavMenu;
    }

    // Implement IDisposable to unsubscribe from the event
    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
}